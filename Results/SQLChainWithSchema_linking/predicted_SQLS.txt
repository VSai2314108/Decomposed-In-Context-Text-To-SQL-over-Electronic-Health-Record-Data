SELECT count(DISTINCT Singer_ID) FROM singer #### Question: How many singers are there in each concert? #### SQLite SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### SQLite FIXED SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### Question: How many singers are there in each concert? #### SQLite SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### SQLite FIXED SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### Question: How many singers are there in each concert? #### SQLite SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### SQLite FIXED SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### Question: How many singers are there in each concert? #### SQLite SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### SQLite FIXED SQL QUERY SELECT concert_ID, COUNT(Singer_ID) FROM singer_in_concert GROUP BY concert_ID #### Question: How many singers are there in each concert?
SELECT count(DISTINCT Singer_ID) FROM singer #### Question: What is the total number of concerts? #### SQLite SQL QUERY SELECT count(*) FROM concert #### SQLite FIXED SQL QUERY SELECT count(DISTINCT concert_ID) FROM concert #### Question: What is the total number of singers in a concert? #### SQLite SQL QUERY SELECT count(*) FROM singer_in_concert #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Singer_ID) FROM singer_in_concert #### Question: What is the total number of singers in a concert? #### SQLite SQL QUERY SELECT count(*) FROM singer_in_concert #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Singer_ID) FROM singer_in_concert #### Question: What is the total number of singers in a concert? #### SQLite SQL QUERY SELECT count(*) FROM singer_in_concert #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Singer_ID) FROM singer_in_concert #### Question: What is the total number of singers in a concert? #### SQLite SQL QUERY SELECT count(*) FROM singer_in_concert #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Singer_ID) FROM singer_in_concert #### Question: What is the total number of singers in a concert? #### SQLite SQL QUERY SELECT count(*) FROM singer_in_concert #### SQLite
SELECT Name ,  Country ,  Age FROM singer ORDER BY Age DESC
SELECT Name ,  Country ,  Age FROM singer ORDER BY Age DESC
SELECT AVG(Age) ,  MIN(Age) ,  MAX(Age) FROM singer WHERE Country  =  'France'
SELECT AVG(Age) ,  MIN(Age) ,  MAX(Age) FROM singer WHERE Country  =  'France'
SELECT Song_Name ,  Song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
SELECT Name ,  Song_release_year FROM singer ORDER BY Age ASC LIMIT 1
SELECT DISTINCT Country FROM singer WHERE Age  >  20
SELECT DISTINCT Country FROM singer WHERE Age  >  20
SELECT Country ,  COUNT (Singer_ID) FROM singer GROUP BY Country
SELECT Country ,  COUNT (Singer_ID) FROM singer GROUP BY Country
SELECT DISTINCT Song_Name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
SELECT DISTINCT Song_Name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
SELECT Location ,  Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT Location ,  Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT max(Capacity) ,  avg(Average) FROM stadium
SELECT avg(Capacity) ,  max(Capacity) FROM stadium
SELECT Name ,  Capacity FROM stadium WHERE Average  >  (SELECT avg(Average) FROM stadium)
SELECT Name ,  Capacity FROM stadium WHERE Average  >  (SELECT avg(Average) FROM stadium)
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
SELECT COUNT(*) FROM concert WHERE YEAR  IN  (2014,2015)
SELECT T1.Name ,  count(T2.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Name
SELECT T1.Stadium_ID ,  count(T2.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Stadium_ID
SELECT T1.Name ,  T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T2.Year HAVING count(*)  =  (SELECT max(count(*)) FROM concert AS T3 GROUP BY T3.Year) #### PostgreSQL SQL QUERY SELECT T1.Name ,  T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T2.Year HAVING count(*)  =  (SELECT max(count(*)) FROM concert AS T3 GROUP BY T3.Year) #### PostgreSQL FIXED SQL QUERY SELECT T1.Name ,  T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T2.Year HAVING count(*)  =  (SELECT max(count(*)) FROM concert AS T3 GROUP BY T3.Year) #### MySQL SQL QUERY SELECT T1.Name ,  T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T2.Year HAVING count(*)  =  (SELECT max(count(*)) FROM concert AS T3 GROUP BY T3.Year) #### MySQL FIXED SQL QUERY SELECT T1.Name
SELECT T1.Name ,  T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T2.concert_ID HAVING T2.Year  >  2013
SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY count(*) DESC LIMIT 1
SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS (SELECT * FROM concert AS T2 WHERE T2.Stadium_ID  =  T1.Stadium_ID)
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS (SELECT * FROM concert AS T2 WHERE T2.Stadium_ID  =  T1.Stadium_ID)
SELECT DISTINCT Country FROM singer WHERE Age  >  40 AND Age  <  30
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT DISTINCT T1.Name FROM stadium AS T1 WHERE NOT EXISTS (SELECT * FROM concert AS T2 WHERE T2.Year  =  2014 AND T2.Stadium_ID  =  T1.Stadium_ID)
SELECT T1.concert_Name ,  T1.Theme ,  count(DISTINCT T2.Singer_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID GROUP BY T1.concert_ID
SELECT T1.concert_Name ,  T1.Theme ,  count(DISTINCT T2.Singer_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID GROUP BY T1.concert_Name ,  T1.Theme
SELECT T1.Name ,  count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name ,  count(DISTINCT T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID WHERE T3.Year  =  2014
SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID WHERE T3.Year  =  2014
SELECT Name ,  Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT Name ,  Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2014 INTERSECT SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2015 #### PostgreSQL SQL QUERY SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2014 INTERSECT SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2015 #### PostgreSQL FIXED SQL QUERY SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2014 INTERSECT SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2015 #### MySQL SQL QUERY SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2014 INTERSECT SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year  =  2015
SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE concert.Year  =  2014 INTERSECT SELECT Name ,  Location FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE concert.Year  =  2015
SELECT count(concert_ID) FROM concert WHERE Stadium_ID  =  (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1) #### PostgreSQL SQL QUERY SELECT count(concert_ID) FROM concert WHERE Stadium_ID  =  (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1) #### PostgreSQL FIXED SQL QUERY SELECT count(concert_ID) FROM concert WHERE Stadium_ID  =  (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(DISTINCT T1.concert_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Capacity  =  (SELECT max(Capacity) FROM stadium) #### PostgreSQL SQL QUERY SELECT count(DISTINCT T1.concert_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Capacity  =  (SELECT max(Capacity) FROM stadium) #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT T1.concert_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Capacity  =  (SELECT max(Capacity) FROM stadium) #### MySQL SQL QUERY SELECT count(DISTINCT T1.concert_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Capacity  =  (SELECT max(Capacity) FROM stadium) #### MySQL FIXED SQL QUERY SELECT count(DISTINCT T1.concert_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.
SELECT count(*) FROM Pets WHERE weight  >  10
SELECT count(*) FROM Pets WHERE weight  >  10
SELECT min(pet_age) FROM Pets WHERE pet_type  =  'dog'
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
SELECT max(weight) ,  pet_type FROM Pets GROUP BY pet_type
SELECT PetType ,  max(weight) FROM Pets GROUP BY PetType
SELECT count(DISTINCT T2.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Age  >  20
SELECT count(DISTINCT T1.petid) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.age  >  20
SELECT count(PetID) FROM Pets AS T1 JOIN Student AS T2 ON T1.PetID  =  T2.PetID WHERE T1.PetType  =  'dog' AND T2.Sex  =  'F'
SELECT count(PetID) FROM Pets AS T1 JOIN Student AS T2 ON T1.PetID  =  T2.PetID WHERE T2.Sex  =  'F' AND T1.PetType  =  'dog'
SELECT count(DISTINCT PetType) FROM Pets
SELECT count(DISTINCT PetType) FROM Pets
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN pets AS T2 ON T1.StuID  =  T2.StuID WHERE T2.PetType  =  'cat' OR T2.PetType  =  'dog'
SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' OR T3.PetType  =  'dog'
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN pets AS T2 ON T1.StuID  =  T2.StuID WHERE T2.PetType  =  'cat' OR T2.PetType  =  'dog'
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN pets AS T2 ON T1.StuID  =  T2.StuID WHERE T2.PetType  =  'cat' OR T2.PetType  =  'dog'
SELECT DISTINCT T1.major ,  T1.age FROM student AS T1 WHERE T1.stuid  NOT IN (SELECT DISTINCT T2.petid FROM pets AS T2 WHERE T2.pettype  =  'cat')
SELECT T1.Major ,  T1.Age FROM Student AS T1 WHERE NOT EXISTS (SELECT * FROM Pets AS T2 WHERE T2.PetType  =  'cat' AND T1.PetID  =  T2.PetID)
SELECT DISTINCT T1.StuID FROM Student AS T1 WHERE NOT EXISTS (SELECT * FROM Pets AS T2 WHERE T2.PetType  =  'cat' AND T2.PetID  =  T1.StuID)
SELECT DISTINCT T1.StuID FROM Student AS T1 WHERE NOT EXISTS (SELECT * FROM Pets AS T2 WHERE T2.PetType  =  'cat' AND T2.PetID  =  T1.StuID)
SELECT DISTINCT T1.Fname ,  T1.Age FROM student AS T1 JOIN pets AS T2 ON T1.StuID  =  T2.StuID WHERE T2.PetType  =  'dog' AND T2.PetType  !=  'cat'
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog' AND NOT EXISTS (SELECT * FROM pets AS T4 WHERE T4.PetType  =  'cat' AND T4.PetID  =  T3.PetID)
SELECT PetType ,  weight FROM Pets WHERE pet_age  =  (SELECT min(pet_age) FROM Pets)
SELECT PetType, weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY PetType, weight ORDER BY pet_age ASC LIMIT 1
SELECT PetID ,  weight FROM Pets WHERE pet_age  >  1
SELECT PetID ,  weight FROM Pets WHERE pet_age  >  1
SELECT avg(pet_age) ,  max(pet_age) ,  PetType FROM Pets GROUP BY PetType
SELECT avg(pet_age) ,  max(pet_age) FROM Pets GROUP BY PetType
SELECT PetType ,  AVG (weight) FROM Pets GROUP BY PetType
SELECT PetType ,  AVG (weight) FROM Pets GROUP BY PetType
SELECT DISTINCT T1.Fname ,  T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID
SELECT DISTINCT T1.Fname ,  T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID
SELECT T1.petid FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.lname  =  'Smith'
SELECT T1.petid FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.lname  =  'Smith'
SELECT count(DISTINCT T1.petid) ,  T3.stuid FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.stuid  =  T3.stuid GROUP BY T3.stuid
SELECT T1.StuID ,  count(T2.PetID) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID
SELECT T1.Fname ,  T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T2.StuID HAVING count(*)  >  1
SELECT T1.Fname ,  T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T2.StuID HAVING count(*)  >  1
SELECT T1.LName FROM Student AS T1 JOIN Pets AS T2 ON T1.StuID  =  T2.StuID WHERE T2.PetType  =  'cat' AND T2.pet_age  =  3
SELECT T1.LName FROM Student AS T1 JOIN Pets AS T2 ON T1.StuID  =  T2.StuID WHERE T2.PetType  =  'cat' AND T2.pet_age  =  3
SELECT avg(age) FROM student AS T1 WHERE NOT EXISTS (SELECT * FROM has_pet AS T2 WHERE T2.stuid  =  T1.stuid)
SELECT avg(age) FROM student AS T1 WHERE NOT EXISTS (SELECT * FROM has_pet AS T2 WHERE T2.stuid  =  T1.stuid)
SELECT count(*) FROM continents
SELECT count(DISTINCT ContId) FROM continents #### Question: What is the number of countries? #### SQLite SQL QUERY SELECT count(*) FROM countries #### SQLite FIXED SQL QUERY SELECT count(DISTINCT CountryId) FROM countries #### Question: What is the number of car makers? #### SQLite SQL QUERY SELECT count(*) FROM car_makers #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Id) FROM car_makers #### Question: What is the number of car models? #### SQLite SQL QUERY SELECT count(*) FROM model_list #### SQLite FIXED SQL QUERY SELECT count(DISTINCT ModelId) FROM model_list #### Question: What is the number of cars? #### SQLite SQL QUERY SELECT count(*) FROM cars_data #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Id) FROM cars_data #### Question: What is the number of car models made by each car maker? #### SQLite SQL QUERY SELECT car_makers.Maker,count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker #### SQLite FIXED SQL QUERY SELECT car_makers.Maker,count(DISTINCT model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker #### Question: What is the
SELECT T1.ContId ,  T1.Continent ,  count(DISTINCT T2.CountryId) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId
SELECT T1.ContId ,  T1.Continent ,  count(DISTINCT T2.CountryId) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId
SELECT count(DISTINCT CountryId) FROM countries #### MySQL SQL QUERY SELECT count(*) FROM countries #### MySQL FIXED SQL QUERY SELECT count(DISTINCT CountryId) FROM countries #### PostgreSQL SQL QUERY SELECT count(*) FROM countries #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT CountryId) FROM countries
SELECT count(DISTINCT CountryId) FROM countries #### PostgreSQL SQL QUERY SELECT count(*) FROM countries #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT CountryId) FROM countries
SELECT T1.FullName ,  T1.Id ,  count(T2.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id
SELECT T1.FullName ,  T1.Id ,  count(T2.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id
SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT Model FROM car_names WHERE Model IN (SELECT Model FROM car_names WHERE Model IN (SELECT Model FROM car_names WHERE Weight  <  (SELECT avg(Weight) FROM cars_data)))
SELECT Model FROM car_names WHERE Model IN (SELECT Model FROM car_names WHERE Weight  <  (SELECT avg(Weight) FROM cars_data))
SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Year  =  1970
SELECT DISTINCT T1.FullName FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Year  =  1970
SELECT T1.Make ,  T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Model  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### PostgreSQL SQL QUERY SELECT T1.Make ,  T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Model  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### PostgreSQL FIXED SQL QUERY SELECT T1.Make ,  T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Model  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### MySQL SQL QUERY SELECT T1.Make ,  T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Model  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### MySQL FIXED SQL QUERY SELECT T1.Make ,  T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Model  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### Oracle SQL QUERY SELECT T1.Make ,  T2.Year FROM car_names AS T1 JOIN cars_
SELECT T1.Maker ,  min(T2.Year) FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### PostgreSQL SQL QUERY SELECT T1.Maker ,  min(T2.Year) FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### PostgreSQL FIXED SQL QUERY SELECT T1.Maker ,  min(T2.Year) FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### MySQL SQL QUERY SELECT T1.Maker ,  min(T2.Year) FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### MySQL FIXED SQL QUERY SELECT T1.Maker ,  min(T2.Year) FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data) #### Oracle SQL
SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Year  >  1980
SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Year  >  1980
SELECT T1.Continent ,  count(DISTINCT T2.Id) FROM continents AS T1 JOIN countries AS T3 ON T1.ContId  =  T3.Continent JOIN car_makers AS T2 ON T3.CountryId  =  T2.Country GROUP BY T1.Continent
SELECT T1.Continent ,  count(T2.Id) FROM continents AS T1 JOIN car_makers AS T2 ON T1.ContId  =  T2.Country GROUP BY T1.Continent
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN car_names AS T3 ON T2.Id  =  T3.MakeId GROUP BY T3.MakeId HAVING count(*)  =  (SELECT max(count(*)) FROM car_makers AS T4 JOIN car_names AS T5 ON T4.Id  =  T5.MakeId GROUP BY T5.MakeId)
SELECT DISTINCT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE T2.Id  >  (SELECT max(Id) FROM car_makers)
SELECT count(T2.Model) ,  T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName
SELECT count(model_list.Model) ,  T2.id ,  T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id
SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model JOIN car_makers AS T4 ON T3.Maker  =  T4.Id WHERE T2.Model  =  'hornet sportabout (sw)' AND T3.Model  =  'hornet sportabout (sw)' AND T3.Maker  =  'amc' AND T4.Id  =  'amc'
SELECT Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.MakeId WHERE T2.Model  =  'amc hornet sportabout (sw)'
SELECT count(DISTINCT T1.Id) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryName WHERE T2.CountryName  =  'france'
SELECT count(DISTINCT T1.Id) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryName WHERE T2.CountryName  =  'France'
SELECT count(model_list.Model) FROM model_list AS T1 JOIN countries AS T2 ON T1.Maker  =  T2.CountryId WHERE T2.CountryName  =  'USA' #### PostgreSQL SQL QUERY SELECT count(model_list.Model) FROM model_list AS T1 JOIN countries AS T2 ON T1.Maker  =  T2.CountryId WHERE T2.CountryName  =  'USA' #### PostgreSQL FIXED SQL QUERY SELECT count(model_list.Model) FROM model_list AS T1 JOIN countries AS T2 ON T1.Maker  =  T2.CountryId WHERE T2.CountryName  =  'USA'
SELECT count(Model) FROM car_names AS T1 JOIN countries AS T2 ON T1.MakeId  =  T2.CountryId WHERE T2.CountryName  =  'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders  =  4
SELECT AVG (MPG) FROM cars_data WHERE Cylinders  =  4
SELECT min(Weight) FROM cars_data WHERE Cylinders  =  8 AND YEAR  =  1974
SELECT min(Weight) FROM cars_data WHERE Cylinders  =  8 AND YEAR  =  1974
SELECT DISTINCT T1.Maker ,  T2.Model FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId ORDER BY T1.Maker
SELECT DISTINCT T1.Maker ,  T2.Model FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId ORDER BY T1.Maker
SELECT DISTINCT T1.CountryId ,  T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE EXISTS (SELECT * FROM car_makers AS T3 WHERE T3.Country  =  T1.CountryId)
SELECT DISTINCT T1.CountryName ,  T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE T2.Country  =  T1.CountryId
SELECT count(*) FROM cars_data WHERE Horsepower  >  150
SELECT count(*) FROM cars_data WHERE Horsepower  >  150
SELECT avg(Weight) ,  Year FROM cars_data GROUP BY Year
SELECT avg(Weight) ,  Year FROM cars_data GROUP BY Year
SELECT DISTINCT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN continents AS T3 ON T1.Continent  =  T3.ContId GROUP BY T2.Country HAVING count(*)  >=  3
SELECT DISTINCT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN continents AS T3 ON T1.Continent  =  T3.ContId WHERE T3.Continent  =  'Europe' GROUP BY T2.Country HAVING count(*)  >=  3
SELECT max(T1.Horsepower) ,  T2.Maker FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Cylinders  =  3 GROUP BY T2.Maker
SELECT max(T1.Horsepower) ,  T2.Maker FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Cylinders  =  3 GROUP BY T2.Maker
SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1
SELECT MAX(MPG) FROM cars_data
SELECT avg(Horsepower) FROM cars_data WHERE Year  <  1980
SELECT avg(Horsepower) FROM cars_data WHERE Year  <  1980
SELECT avg(Edispl) FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo'
SELECT avg(Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model JOIN car_makers AS T4 ON T3.Maker  =  T4.Id WHERE T2.Model  =  'volvo' AND T3.Model  =  'volvo' AND T4.Id  =  'volvo'
SELECT max(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT max(Accelerate) FROM cars_data WHERE Cylinders IN (SELECT DISTINCT Cylinders FROM cars_data GROUP BY Cylinders)
SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1
SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM cars_data WHERE Cylinders  >  4
SELECT count(*) FROM cars_data WHERE Cylinders  >  4
SELECT count(*) FROM cars_data WHERE Year  =  1980
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id WHERE T2.FullName  =  'American Motor Company'
SELECT count(model_list.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Maker WHERE T2.Maker  =  'American Motor Company' #### PostgreSQL SQL QUERY SELECT count(model_list.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Maker WHERE T2.Maker  =  'American Motor Company' #### PostgreSQL FIXED SQL QUERY SELECT count(model_list.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Maker WHERE T2.Maker  =  'American Motor Company'
SELECT T1.FullName ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T2.Model HAVING count(*)  >  3 #### PostgreSQL SQL QUERY SELECT T1.FullName ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T2.Model HAVING count(*)  >  3 #### PostgreSQL FIXED SQL QUERY SELECT T1.FullName ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T2.Model HAVING count(*)  >  3 #### MySQL SQL QUERY SELECT T1.FullName ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T2.Model HAVING count(*)  >  3 #### MySQL FIXED SQL QUERY SELECT T1.FullName ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T2.Model HAVING count(*)  >  3 #### Oracle SQL QUERY SELECT T1.FullName ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T
SELECT T1.Id ,  T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T2.ModelId HAVING count(*)  >  3
SELECT DISTINCT Model FROM car_names WHERE MakeId  =  (SELECT Id FROM car_makers WHERE FullName  =  'General Motors') EXCEPT SELECT DISTINCT Model FROM car_names WHERE MakeId  =  (SELECT Id FROM car_makers WHERE FullName  =  'General Motors')
SELECT DISTINCT Model FROM car_names WHERE Maker  =  'General Motors' UNION SELECT DISTINCT Model FROM cars_data WHERE Weight  >  3500
SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000
SELECT DISTINCT Year FROM cars_data WHERE Weight  <  4000 AND Weight  >  3000
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model WHERE T1.Accelerate  =  (SELECT min(Accelerate) FROM cars_data) AND T3.Maker  =  'volvo' #### PostgreSQL SQL QUERY SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model WHERE T1.Accelerate  =  (SELECT min(Accelerate) FROM cars_data) AND T3.Maker  =  'volvo' #### PostgreSQL FIXED SQL QUERY SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model WHERE T1.Accelerate  =  (SELECT min(Accelerate) FROM cars_data) AND T3.Maker  =  'volvo' #### MySQL SQL QUERY SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =
SELECT Cylinders FROM cars_data WHERE MakeId  =  (SELECT MakeId FROM car_names WHERE Model  =  'volvo') AND Accelerate  =  (SELECT min(Accelerate) FROM cars_data WHERE MakeId  =  (SELECT MakeId FROM car_names WHERE Model  =  'volvo'))
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data)
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data)
SELECT count(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE T1.CountryId  =  T2.Id GROUP BY T1.CountryId HAVING count(*)  >  2
SELECT count(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE T1.CountryId  =  T2.Id GROUP BY T1.CountryId HAVING count(*)  >  2
SELECT count(*) FROM cars_data WHERE Cylinders  >  6
SELECT count(*) FROM cars_data WHERE Cylinders  >  6
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders  =  4 ORDER BY Horsepower DESC LIMIT 1
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders  =  4 ORDER BY Horsepower DESC LIMIT 1
SELECT MakeId ,  Make FROM car_names JOIN cars_data ON car_names.MakeId  =  cars_data.Id WHERE Cylinders  >  3 AND Horsepower  >  (SELECT min(Horsepower) FROM cars_data) GROUP BY MakeId ,  Make
SELECT MakeId ,  Maker FROM car_makers WHERE Cylinders  <  4 AND MakeId NOT IN (SELECT MakeId FROM cars_data WHERE Horsepower  =  (SELECT min(Horsepower) FROM cars_data))
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year  <  1980
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year  <  1980
SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id JOIN car_makers AS T3 ON T1.Make  =  T3.Id WHERE T2.Weight  <  3500 AND T3.FullName  !=  'Ford Motor Company'
SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id JOIN car_makers AS T3 ON T1.Maker  =  T3.Id WHERE T2.Weight  <  3500 AND T3.Maker  !=  'Ford Motor Company'
SELECT T1.CountryName FROM countries AS T1 WHERE NOT EXISTS (SELECT * FROM car_makers AS T2 WHERE T2.Country  =  T1.CountryId)
SELECT T1.CountryName FROM countries AS T1 WHERE NOT EXISTS (SELECT * FROM car_makers AS T2 WHERE T2.Country  =  T1.CountryId)
SELECT Id ,  Maker FROM car_makers WHERE (SELECT count(*) FROM model_list WHERE Maker = car_makers.Maker)  >=  2 AND (SELECT count(*) FROM car_makers)  >  3 #### PostgreSQL SQL QUERY SELECT Id ,  Maker FROM car_makers WHERE (SELECT count(*) FROM model_list WHERE Maker = car_makers.Maker)  >=  2 AND (SELECT count(*) FROM car_makers)  >  3 #### PostgreSQL FIXED SQL QUERY SELECT Id ,  Maker FROM car_makers WHERE (SELECT count(*) FROM model_list WHERE Maker = car_makers.Maker)  >=  2 AND (SELECT count(*) FROM car_makers)  >  3
SELECT T1.Id ,  T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN cars_data AS T3 ON T1.Id  =  T3.Id GROUP BY T1.Id HAVING count(*)  >=  2 AND count(*)  >  3
SELECT DISTINCT T1.CountryId ,  T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE count(*)  >  3 EXCEPT SELECT T1.CountryId ,  T1.CountryName FROM countries AS T1 JOIN car_names AS T2 ON T1.CountryId  =  T2.CountryId WHERE T2.Model  =  'fiat'
SELECT DISTINCT T1.CountryId ,  T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN car_names AS T3 ON T2.Id  =  T3.MakeId WHERE T3.Model  =  'fiat'
SELECT Country FROM airlines WHERE Airline  =  'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline  =  'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline  =  'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline  =  'Jetblue Airways'
SELECT DISTINCT Airline, Abbreviation FROM airlines WHERE uid IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE Country = 'USA') OR DestAirport IN (SELECT AirportCode FROM airports WHERE Country = 'USA'))
SELECT Airline ,  Abbreviation FROM airlines WHERE Country  =  'USA'
SELECT AirportCode ,  AirportName FROM airports WHERE City  =  'Anthony'
SELECT AirportCode ,  AirportName FROM airports WHERE City  =  'Anthony'
SELECT count(*) FROM airlines
SELECT count(*) FROM airlines
SELECT COUNT (DISTINCT AirportCode) FROM airports
SELECT count(DISTINCT AirportCode) FROM airports #### PostgreSQL SQL QUERY SELECT count(*) FROM airports #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT AirportCode) FROM airports
SELECT count(DISTINCT flights.FlightNo) FROM flights #### PostgreSQL SQL QUERY SELECT count(*) FROM flights #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT flights.FlightNo) FROM flights
SELECT count(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL'
SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' #### PostgreSQL SQL QUERY SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' #### PostgreSQL FIXED SQL QUERY SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL'
SELECT COUNT (DISTINCT uid) FROM airlines WHERE Country  =  'USA'
SELECT count(*) FROM airlines WHERE Country  =  'USA'
SELECT DISTINCT City, Country FROM airports WHERE AirportCode = 'Alton'
SELECT City ,  Country FROM airports WHERE AirportCode  =  'Alton'
SELECT AirportName FROM airports WHERE AirportCode  =  'AKO'
SELECT AirportName FROM airports WHERE AirportCode  =  'AKO'
SELECT AirportName FROM airports WHERE City  =  'Aberdeen'
SELECT AirportName FROM airports WHERE City  =  'Aberdeen'
SELECT count(*) FROM flights WHERE SourceAirport  =  'APG'
SELECT count(*) FROM flights WHERE SourceAirport  =  'APG'
SELECT count(*) FROM flights WHERE DestAirport  =  'ATO'
SELECT count(FlightNo) FROM flights WHERE DestAirport  =  'ATO'
SELECT count(FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
SELECT count(*) FROM flights WHERE SourceAirport  =  'Aberdeen'
SELECT count(FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
SELECT count(FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportName  =  'Aberdeen'
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS airports2 ON flights.DestAirport = airports2.AirportCode WHERE airports.City = 'Aberdeen' AND airports2.City = 'Ashley'
SELECT count(*) FROM flights WHERE SourceAirport  =  'Aberdeen' AND DestAirport  =  'Ashley'
SELECT count(*) FROM flights WHERE Airline  =  'JetBlue Airways'
SELECT count(*) FROM flights WHERE Airline  =  'Jetblue Airways'
SELECT count(*) FROM flights WHERE Airline  =  'United Airlines' AND DestAirport  =  'ASY'
SELECT count(FlightNo) FROM flights WHERE DestAirport  =  'ASY' AND Airline  =  'United Airlines'
SELECT count(FlightNo) FROM flights WHERE SourceAirport  =  'AHD' AND Airline  =  'United Airlines'
SELECT count(*) FROM flights WHERE SourceAirport  =  'AHD Airport' AND Airline  =  'United Airlines'
SELECT count(FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
SELECT count(FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T1.Airline  =  'United Airlines' AND T2.AirportName  =  'Aberdeen'
SELECT T1.City ,  count(T2.SourceAirport) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(T2.SourceAirport) DESC LIMIT 1
SELECT T1.City ,  count(T2.DestAirport) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(T2.DestAirport) DESC LIMIT 1
SELECT T1.City ,  count(T2.SourceAirport) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(T2.SourceAirport) DESC LIMIT 1
SELECT T1.City ,  count(T2.SourceAirport) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(T2.SourceAirport) DESC LIMIT 1
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY count(*) ASC LIMIT 1
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T2.SourceAirport HAVING count(*)  =  (SELECT min(count(*)) FROM flights GROUP BY SourceAirport)
SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1
SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1
SELECT T1.Abbreviation ,  T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline GROUP BY T2.Airline HAVING count(*)  =  (SELECT min(T3.Airline) FROM flights AS T3 GROUP BY T3.Airline)
SELECT T1.Abbreviation ,  T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Abbreviation HAVING count(*)  =  (SELECT min(T3.uid) FROM airlines AS T3 JOIN flights AS T4 ON T3.uid  =  T4.Airline GROUP BY T3.uid)
SELECT DISTINCT T1.Airline FROM flights AS T1 WHERE T1.SourceAirport  =  'AHD'
SELECT Airline FROM flights WHERE SourceAirport  =  'AHD'
SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportCode  =  'AHD'
SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportCode  =  'AHD'
SELECT DISTINCT T1.Airline FROM flights AS T1 WHERE T1.SourceAirport  =  'APG' AND T1.DestAirport  =  'CVO'
SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.AirportCode  =  'APG' OR T2.AirportCode  =  'CVO'
SELECT Airline FROM flights WHERE SourceAirport  =  'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport  =  'APG'
SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.AirportCode  =  'CVO' AND T1.DestAirport  !=  'APG'
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.Airline  =  T2.Airline GROUP BY T2.Airline HAVING count(*)  >=  10
SELECT Airline FROM flights GROUP BY Airline HAVING count(*)  >=  10
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline GROUP BY T2.FlightNo HAVING count(*)  <  200
SELECT Airline FROM flights GROUP BY Airline HAVING count(*)  <  200
SELECT FlightNo FROM flights WHERE Airline  =  'United Airlines'
SELECT FlightNo FROM flights WHERE Airline  =  'United Airlines'
SELECT FlightNo FROM flights WHERE SourceAirport  =  'APG'
SELECT FlightNo FROM flights WHERE SourceAirport  =  'APG'
SELECT FlightNo FROM flights WHERE DestAirport  =  'APG'
SELECT DISTINCT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportCode  =  'APG'
SELECT DISTINCT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
SELECT FlightNo FROM flights WHERE SourceAirport  =  'ABD'
SELECT DISTINCT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
SELECT DISTINCT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportName  =  'Aberdeen'
SELECT count(FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen' OR T2.City  =  'Abilene'
SELECT count(FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportName  =  'Aberdeen' OR T2.AirportName  =  'Abilene'
SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportName NOT IN (SELECT T2.SourceAirport FROM flights AS T2 UNION SELECT T3.DestAirport FROM flights AS T3)
SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
SELECT count(*) FROM employee
SELECT count(*) FROM employee
SELECT Name FROM employee ORDER BY Age ASC
SELECT Name FROM employee ORDER BY Age ASC
SELECT City ,  count(*) FROM employee GROUP BY City
SELECT City ,  COUNT(*) FROM employee GROUP BY City
SELECT City FROM employee WHERE Age  <  30 GROUP BY City HAVING count(*)  >  1
SELECT City FROM employee WHERE Age  <  30 GROUP BY City HAVING count(*)  >  1
SELECT count(*) ,  Location FROM shop GROUP BY Location
SELECT Location ,  count(*) FROM shop GROUP BY Location
SELECT Manager_name ,  District FROM shop WHERE Number_products = (SELECT max(Number_products) FROM shop)
SELECT Manager_name ,  District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT min(Number_products) ,  max(Number_products) FROM shop
SELECT min(Number_products) , max(Number_products) FROM shop
SELECT Name ,  Location ,  District FROM shop ORDER BY Number_products DESC
SELECT Name ,  Location ,  District FROM shop ORDER BY Number_products DESC
SELECT Name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop)
SELECT Name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop)
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T2.Employee_ID HAVING count(*)  =  (SELECT max(count(*)) FROM evaluation GROUP BY Employee_ID)
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T2.Year_awarded HAVING count(*)  =  (SELECT max(count(*)) FROM evaluation AS T3 GROUP BY T3.Year_awarded)
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID WHERE T2.Bonus  =  (SELECT max(Bonus) FROM evaluation) #### PostgreSQL SQL QUERY SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID WHERE T2.Bonus  =  (SELECT max(Bonus) FROM evaluation) #### PostgreSQL FIXED SQL QUERY SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID WHERE T2.Bonus  =  (SELECT max(Bonus) FROM evaluation) #### MySQL SQL QUERY SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID WHERE T2.Bonus  =  (SELECT max(Bonus) FROM evaluation) #### MySQL FIXED SQL QUERY SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID WHERE T2.Bonus  =  (SELECT max(Bonus) FROM evaluation) #### Oracle SQL QUERY SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID WHERE T2.Bonus  =
SELECT DISTINCT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID WHERE T2.Bonus  =  (SELECT max(Bonus) FROM evaluation)
SELECT T1.Name FROM employee AS T1 WHERE NOT EXISTS (SELECT * FROM evaluation AS T2 WHERE T2.Year_awarded  >  0)
SELECT T1.Name FROM employee AS T1 WHERE NOT EXISTS (SELECT * FROM evaluation AS T2 WHERE T2.Employee_ID  =  T1.Employee_ID)
SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Name HAVING count(*)  =  (SELECT max(count(*)) FROM hiring GROUP BY Shop_ID)
SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Shop_ID HAVING count(*)  =  (SELECT max(count(*)) FROM hiring GROUP BY Shop_ID) #### PostgreSQL SQL QUERY SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Shop_ID HAVING count(*)  =  (SELECT max(count(*)) FROM hiring GROUP BY Shop_ID) #### PostgreSQL FIXED SQL QUERY SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Shop_ID HAVING count(*)  =  (SELECT max(count(*)) FROM hiring GROUP BY Shop_ID) #### Oracle SQL QUERY SELECT T1.Name FROM shop T1 JOIN hiring T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Shop_ID HAVING count(*)  =  (SELECT max(count(*)) FROM hiring GROUP BY Shop_ID) #### Oracle FIXED SQL QUERY SELECT T1.Name FROM shop T1 JOIN hiring T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Shop
SELECT DISTINCT T1.Name FROM shop AS T1 WHERE NOT EXISTS (SELECT * FROM hiring AS T2 WHERE T2.Shop_ID  =  T1.Shop_ID)
SELECT DISTINCT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID WHERE T2.Employee_ID IS NULL
SELECT T2.Name ,  count(T1.Employee_ID) FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID
SELECT count(T1.Employee_ID) ,  T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Name
SELECT sum(Bonus) FROM evaluation
SELECT sum(Bonus) FROM evaluation
SELECT * FROM hiring
SELECT * FROM hiring
SELECT DISTINCT District FROM shop WHERE Number_products  >  3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products  <  10000
SELECT DISTINCT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products  >  10000 #### PostgreSQL SQL QUERY SELECT DISTINCT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products  >  10000 #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products  >  10000
SELECT count(DISTINCT Location) FROM shop
SELECT count(DISTINCT Location) FROM shop
SELECT count(DISTINCT Document_ID) FROM Documents #### Question: How many paragraphs do we have? #### SQLite SQL QUERY SELECT count(*) FROM Paragraphs #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Paragraph_ID) FROM Paragraphs #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many template types do we have? #### SQLite SQL QUERY SELECT count(*) FROM Ref_Template_Types #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_Type_Code) FROM Ref_Template_Types #### Question: What is the name of the template type for the template with the highest version number? #### SQLite SQL QUERY SELECT Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code ORDER BY Version_Number DESC LIMIT 1 #### SQLite FIXED SQL QUERY SELECT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code ORDER BY Templates.Version_Number DESC LIMIT 1 #### Question: What is the name of the template type for the template with the highest version number? #### SQLite SQL QUERY
SELECT count(DISTINCT Document_ID) FROM Documents #### PostgreSQL SQL QUERY SELECT count(*) FROM Documents #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT Document_ID) FROM Documents
SELECT Document_ID ,  Document_Name ,  Document_Description FROM Documents
SELECT Document_ID ,  Document_Name ,  Document_Description FROM Documents
SELECT Document_Name ,  Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name ,  Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT T1.Document_ID ,  T2.Template_ID ,  T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Document_Name  =  'Robbin CV' #### MySQL SQL QUERY SELECT T1.Document_ID ,  T2.Template_ID ,  T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Document_Name  =  'Robbin CV' #### MySQL FIXED SQL QUERY SELECT T1.Document_ID ,  T2.Template_ID ,  T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Document_Name  =  'Robbin CV' #### PostgreSQL SQL QUERY SELECT T1.Document_ID ,  T2.Template_ID ,  T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Document_Name  =  'Robbin CV' #### PostgreSQL FIXED SQL QUERY SELECT T1.Document_ID ,  T2.Template_ID ,  T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2
SELECT Document_ID ,  Template_ID ,  Document_Description FROM Documents WHERE Document_Name  =  'Robbin CV'
SELECT count(DISTINCT T1.Template_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID
SELECT count(DISTINCT T1.template_id) FROM templates AS T1 JOIN documents AS T2 ON T1.template_id  =  T2.template_id
SELECT count(DISTINCT T1.Document_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT' #### PostgreSQL SQL QUERY SELECT count(DISTINCT T1.Document_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT' #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT T1.Document_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT' #### Oracle SQL QUERY SELECT count(DISTINCT T1.Document_ID) FROM Documents T1 JOIN Templates T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT' #### Oracle FIXED SQL QUERY SELECT count(DISTINCT T1.Document_ID) FROM Documents T1 JOIN Templates T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT' #### MySQL SQL QUERY SELECT count(DISTINCT T1.Document_ID) FROM Documents T1 JOIN Tem
SELECT count(Document_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code WHERE T2.Template_Type_Code  =  'PPT'
SELECT T1.Template_ID ,  count(T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID
SELECT T1.Template_ID ,  count(T2.Template_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID
SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T2.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents GROUP BY Template_ID) #### PostgreSQL SQL QUERY SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T2.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents GROUP BY Template_ID) #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T2.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents GROUP BY Template_ID) #### Oracle SQL QUERY SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T2.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents GROUP BY Template_ID) #### Oracle FIXED SQL QUERY SELECT T1
SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents) #### PostgreSQL SQL QUERY SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents) #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents) #### Oracle SQL QUERY SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING count(*)  =  (SELECT max(count(*)) FROM Documents) #### Oracle FIXED SQL QUERY SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates T1 JOIN
SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING count(T1.Template_ID)  >  1
SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING count(*)  >  1
SELECT T1.Template_ID FROM Templates AS T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents AS T2) #### PostgreSQL SQL QUERY SELECT T1.Template_ID FROM Templates AS T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents AS T2) #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_ID FROM Templates AS T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents AS T2) #### Oracle SQL QUERY SELECT T1.Template_ID FROM Templates T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents T2) #### Oracle FIXED SQL QUERY SELECT T1.Template_ID FROM Templates T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents T2) #### MySQL SQL QUERY SELECT T1.Template_ID FROM Templates T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents T2) #### MySQL FIXED SQL QUERY SELECT T1.Template_ID FROM Templates T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents T2) #### SQL Server SQL QUERY SELECT T1.Template_ID FROM Tem
SELECT T1.Template_ID FROM Templates AS T1 WHERE T1.Template_ID NOT IN (SELECT DISTINCT T2.Template_ID FROM Documents AS T2)
SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates #### Question: How many templates do we have? #### SQLite SQL QUERY SELECT count(*) FROM Templates #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Template_
SELECT count(DISTINCT Template_ID) FROM Templates #### PostgreSQL SQL QUERY SELECT count(*) FROM Templates #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT Template_ID) FROM Templates
SELECT Template_ID ,  Version_Number ,  Template_Type_Code FROM Templates
SELECT Templates.Template_ID ,  Templates.Version_Number ,  Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code #### Answer: | Template_ID | Version_Number | Template_Type_Code | | --- | --- | --- | | 1 | 1 | 1 | | 2 | 1 | 2 | | 3 | 1 | 3 | | 4 | 1 | 1 | | 5 | 1 | 2 | | 6 | 1 | 3 | | 7 | 1 | 1 | | 8 | 1 | 2 | | 9 | 1 | 3 |
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT'
SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### PostgreSQL SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### PostgreSQL FIXED SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### Oracle SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### Oracle FIXED SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### MySQL SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### MySQL FIXED SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### SQL Server SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT' #### SQL Server FIXED SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Code
SELECT count(*) FROM Templates WHERE Template_Type_Code  =  'CV'
SELECT count(DISTINCT Templates.Template_ID) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code =  'CV'
SELECT DISTINCT Version_Number ,  Template_Type_Code FROM Templates WHERE Version_Number  >  5
SELECT Version_Number ,  Template_Type_Code FROM Templates WHERE Version_Number  >  5
SELECT T1.Template_Type_Code ,  count(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code ,  count(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING count(*)  =  (SELECT max(count(*)) FROM Templates GROUP BY Template_Type_Code)
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code  =  (SELECT T2.Template_Type_Code FROM Templates AS T2 GROUP BY T2.Template_Type_Code ORDER BY count(*) DESC LIMIT 1) #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code  =  (SELECT T2.Template_Type_Code FROM Templates AS T2 GROUP BY T2.Template_Type_Code ORDER BY count(*) DESC LIMIT 1) #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code  =  (SELECT T2.Template_Type_Code FROM Templates AS T2 GROUP BY T2.Template_Type_Code ORDER BY count(*) DESC LIMIT 1) #### MySQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code  =  (SELECT T2.Template_Type_Code FROM Templates AS T2 GROUP BY T2.Template_Type_Code ORDER BY count(*) DESC LIMIT 1) #### MySQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code  =  (SELECT T2.Template_Type_Code FROM Templates AS T2 GROUP BY T
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING count(*)  <  3 #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING count(*)  <  3 #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING count(*)  <  3 #### MySQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING count(*)  <  3 #### MySQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING count(T2.Template_ID)  <  3
SELECT min(Version_Number) ,  Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT min(Version_Number) ,  Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### Oracle SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### Oracle FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### MySQL SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base'
SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### Oracle SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### Oracle FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base' #### MySQL SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_Name  =  'Data base'
SELECT DISTINCT T1.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'BK'
SELECT DISTINCT T1.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'BK'
SELECT T1.Template_Type_Code ,  count(DISTINCT T2.Document_ID) FROM Ref_Template_Types AS T1 JOIN Documents AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code ,  count(DISTINCT T2.Document_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code ,  count(T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY count(T2.Document_ID) DESC LIMIT 1 #### MySQL SQL QUERY SELECT T1.Template_Type_Code ,  count(T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY count(T2.Document_ID) DESC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT T1.Template_Type_Code ,  count(T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY count(T2.Document_ID) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code ,  count(T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY count(T2.Document_ID) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT
SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 #### Oracle SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 #### MySQL SQL QUERY SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID  =  T
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates AS T2) #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates AS T2) #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates AS T2) #### Oracle SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates T2) #### Oracle FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates T2) #### MySQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates T2) #### MySQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates AS T2) #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates AS T2) #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates AS T2) #### Oracle SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates T2) #### Oracle FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates T2) #### MySQL SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates T2) #### MySQL FIXED SQL QUERY SELECT T1.Template_Type_Code FROM Ref_Template_Types T1 WHERE T1
SELECT Template_Type_Code ,  Template_Type_Description FROM Ref_Template_Types
SELECT DISTINCT Template_Type_Code ,  Template_Type_Description FROM Ref_Template_Types
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code WHERE T2.Template_Type_Code  =  'AD' #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code WHERE T2.Template_Type_Code  =  'AD' #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code WHERE T2.Template_Type_Code  =  'AD'
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code WHERE T2.Template_Type_Code  =  'AD' #### PostgreSQL SQL QUERY SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code WHERE T2.Template_Type_Code  =  'AD' #### PostgreSQL FIXED SQL QUERY SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code WHERE T2.Template_Type_Code  =  'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description  =  'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description  =  'Book'
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code
SELECT DISTINCT T1.Template_Type_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID #### PostgreSQL SQL QUERY SELECT DISTINCT T1.Template_Type_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.Template_Type_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID
SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code WHERE T2.Template_Type_Description  =  'Presentation'
SELECT Template_ID FROM Templates WHERE Template_Type_Description  =  'Presentation' #### PostgreSQL SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Description  =  'Presentation' #### PostgreSQL FIXED SQL QUERY SELECT Template_ID FROM Templates WHERE Template_Type_Description  =  'Presentation'
SELECT count(DISTINCT Paragraph_ID) FROM Paragraphs #### PostgreSQL SQL QUERY SELECT count(*) FROM Paragraphs #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT Paragraph_ID) FROM Paragraphs
SELECT count(DISTINCT Paragraph_ID) FROM Paragraphs #### PostgreSQL SQL QUERY SELECT count(*) FROM Paragraphs #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT Paragraph_ID) FROM Paragraphs
SELECT count(Paragraph_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Summer Show' #### PostgreSQL SQL QUERY SELECT count(Paragraph_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Summer Show' #### PostgreSQL FIXED SQL QUERY SELECT count(Paragraph_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Summer Show'
SELECT count(Paragraph_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Summer Show' #### PostgreSQL SQL QUERY SELECT count(Paragraph_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Summer Show' #### PostgreSQL FIXED SQL QUERY SELECT count(Paragraph_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Summer Show'
SELECT * FROM Paragraphs WHERE Paragraph_Text  =  'Korea '
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'
SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### MySQL SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### MySQL FIXED SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### PostgreSQL SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### PostgreSQL FIXED SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY'
SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### MySQL SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### MySQL FIXED SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### PostgreSQL SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' #### PostgreSQL FIXED SQL QUERY SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY'
SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Customer reviews'
SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Customer reviews'
SELECT T1.Document_ID ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID
SELECT T1.Document_ID ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID
SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### PostgreSQL SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### PostgreSQL FIXED SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### Oracle SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### Oracle FIXED SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID  =  T2.Document_ID GROUP
SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### PostgreSQL SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### PostgreSQL FIXED SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### Oracle SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID #### Oracle FIXED SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Paragraph_ID) FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID  =  T2.Document_ID GROUP
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  >=  2
SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  >=  2
SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID HAVING count(*)  =  (SELECT max(Paragraph_ID) FROM Paragraphs)
SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(*) DESC LIMIT 1 #### MySQL SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(*) DESC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(*) DESC LIMIT 1 #### Oracle SQL QUERY SELECT
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID HAVING count(*)  =  (SELECT min(count(*)) FROM Paragraphs AS T3 GROUP BY T3.Document_ID)
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(T2.Paragraph_ID) ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(T2.Paragraph_ID) ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(T2.Paragraph_ID) ASC LIMIT 1 #### Oracle SQL QUERY SELECT T1.Document_ID FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(T2.Paragraph_ID) ASC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT T1.Document_ID FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(T2.Paragraph_ID) ASC LIMIT 1 #### MySQL SQL QUERY SELECT T1.Document
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  =  1 OR count(*)  =  2 #### PostgreSQL SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  =  1 OR count(*)  =  2 #### PostgreSQL FIXED SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  =  1 OR count(*)  =  2 #### MySQL SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  =  1 OR count(*)  =  2 #### MySQL FIXED SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  =  1 OR count(*)  =  2 #### Oracle SQL QUERY SELECT
SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  BETWEEN  1  AND  2 #### PostgreSQL SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  BETWEEN  1  AND  2 #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  BETWEEN  1  AND  2 #### MySQL SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  BETWEEN  1  AND  2 #### MySQL FIXED SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  BETWEEN
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### PostgreSQL SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### PostgreSQL FIXED SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### MySQL SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### MySQL FIXED SQL QUERY SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Par
SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### PostgreSQL SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### MySQL SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' OR T2.Paragraph_Text  =  'Ireland' #### MySQL FIXED SQL QUERY SELECT DISTINCT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_
SELECT COUNT (DISTINCT Teacher_ID) FROM teacher
SELECT count(DISTINCT teacher.Teacher_ID) FROM teacher #### PostgreSQL SQL QUERY SELECT count(*) FROM teacher #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT teacher.Teacher_ID) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC
SELECT teacher.Age ,  teacher.Hometown FROM teacher #### PostgreSQL SQL QUERY SELECT teacher.Age ,  teacher.Hometown FROM teacher #### PostgreSQL FIXED SQL QUERY SELECT teacher.Age ,  teacher.Hometown FROM teacher
SELECT teacher.Age ,  teacher.Hometown FROM teacher #### PostgreSQL SQL QUERY SELECT teacher.Age ,  teacher.Hometown FROM teacher #### PostgreSQL FIXED SQL QUERY SELECT teacher.Age ,  teacher.Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown  !=  ' Little Lever Urban District '
SELECT DISTINCT Name FROM teacher WHERE Hometown  !=  ' Little Lever Urban District '
SELECT name FROM teacher WHERE age  =  32 OR age  =  33
SELECT name FROM teacher WHERE age  =  32 OR age  =  33
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT Hometown ,  COUNT (DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown ,  COUNT (Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count(*) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count(*) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*)  >  1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*)  >  1
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT T1.Name ,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T1.Name
SELECT T1.Name ,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T1.Name
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T2.Course  =  'math'
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T2.Course  =  'math'
SELECT T1.Name ,  count(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name
SELECT T1.Name ,  count(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name HAVING count(*)  >=  2
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name HAVING count(*)  >=  2
SELECT T1.Name FROM teacher AS T1 WHERE NOT EXISTS (SELECT * FROM course_arrange AS T2 WHERE T2.Teacher_ID  =  T1.Teacher_ID)
SELECT T1.Name FROM teacher AS T1 WHERE NOT EXISTS (SELECT * FROM course_arrange AS T2 WHERE T2.Teacher_ID  =  T1.Teacher_ID)
SELECT count(*) FROM visitor WHERE Age < 30
SELECT Name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
SELECT AVG (Age) FROM visitor WHERE Level_of_membership  <=  4
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
SELECT Museum_ID ,  Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1
SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year  <  2009
SELECT Open_Year ,  Num_of_Staff FROM museum WHERE Name  =  'Plaza Museum'
SELECT Name FROM museum WHERE Num_of_Staff  >  (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year  >  2010) AND Open_Year  >  2010
SELECT T1.ID ,  T1.Name ,  T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID GROUP BY T2.visitor_ID HAVING count(*)  >  1
SELECT T1.ID ,  T1.Name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T1.ID  =  (SELECT visitor_ID FROM visit ORDER BY Total_spent DESC LIMIT 1) #### MySQL SQL QUERY SELECT T1.ID ,  T1.Name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T1.ID  =  (SELECT visitor_ID FROM visit ORDER BY Total_spent DESC LIMIT 1) #### MySQL FIXED SQL QUERY SELECT T1.ID ,  T1.Name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T1.ID  =  (SELECT visitor_ID FROM visit ORDER BY Total_spent DESC LIMIT 1) #### PostgreSQL SQL QUERY SELECT T1.ID ,  T1.Name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T1.ID  =  (SELECT visitor_ID FROM visit ORDER BY Total_spent DESC LIMIT 1) #### PostgreSQL FIXED SQL QUERY SELECT T1.ID ,  T1.Name ,
SELECT T1.Museum_ID ,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T2.Num_of_Ticket  =  (SELECT max(Num_of_Ticket) FROM visit) #### PostgreSQL SQL QUERY SELECT T1.Museum_ID ,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T2.Num_of_Ticket  =  (SELECT max(Num_of_Ticket) FROM visit) #### PostgreSQL FIXED SQL QUERY SELECT T1.Museum_ID ,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T2.Num_of_Ticket  =  (SELECT max(Num_of_Ticket) FROM visit) #### MySQL SQL QUERY SELECT T1.Museum_ID ,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T2.Num_of_Ticket  =  (SELECT max(Num_of_Ticket) FROM visit) #### MySQL FIXED SQL QUERY SELECT T1.Museum_ID ,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID
SELECT T1.Name FROM museum AS T1 WHERE NOT EXISTS (SELECT * FROM visit AS T2 WHERE T2.Museum_ID  =  T1.Museum_ID)
SELECT T1.Name ,  T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T2.Num_of_Ticket  =  (SELECT MAX(Num_of_Ticket) FROM visit) #### PostgreSQL SQL QUERY SELECT T1.Name ,  T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T2.Num_of_Ticket  =  (SELECT MAX(Num_of_Ticket) FROM visit) #### PostgreSQL FIXED SQL QUERY SELECT T1.Name ,  T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T2.Num_of_Ticket  =  (SELECT MAX(Num_of_Ticket) FROM visit) #### MySQL SQL QUERY SELECT T1.Name ,  T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T2.Num_of_Ticket  =  (SELECT MAX(Num_of_Ticket) FROM visit) #### MySQL FIXED SQL QUERY SELECT T1.Name ,  T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T2.Num_of_Ticket  =  (SELECT MAX(Num_of_
SELECT avg(Num_of_Ticket) ,  max(Num_of_Ticket) FROM visit
SELECT sum(Total_spent) FROM visit WHERE Level_of_membership  =  1
SELECT DISTINCT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 GROUP BY visitor.Name HAVING COUNT(DISTINCT museum.Museum_ID) = 2
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID  NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year  >  2010) #### PostgreSQL SQL QUERY SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID  NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year  >  2010) #### PostgreSQL FIXED SQL QUERY SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID  NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year  >  2010)
SELECT COUNT(*) FROM museum WHERE Open_Year  >  2013 OR Open_Year  <  2008
SELECT count(*) FROM players
SELECT count(*) FROM players
SELECT count(*) FROM matches
SELECT count(*) FROM matches
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
SELECT avg(winner_rank) FROM matches
SELECT AVG (winner_rank) FROM matches
SELECT max(loser_rank) FROM matches
SELECT min(loser_rank) FROM matches
SELECT count(DISTINCT country_code) FROM players
SELECT count(DISTINCT country_code) FROM players
SELECT count(DISTINCT loser_name) FROM matches
SELECT COUNT (DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 #### PostgreSQL SQL QUERY SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 #### PostgreSQL FIXED SQL QUERY SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
SELECT DISTINCT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.YEAR  =  2013 AND T2.YEAR  =  2016
SELECT first_name ,  last_name FROM players JOIN matches ON winner_id  =  player_id WHERE year  =  2013 INTERSECT SELECT first_name ,  last_name FROM players JOIN matches ON winner_id  =  player_id WHERE year  =  2016
SELECT count(*) FROM matches WHERE year  =  2013 OR year  =  2016
SELECT count(*) FROM matches WHERE year  =  2013 OR year  =  2016
SELECT DISTINCT country_code ,  first_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE tourney_name  =  'WTA Championships' INTERSECT SELECT DISTINCT country_code ,  first_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE tourney_name  =  'Australian Open'
SELECT DISTINCT T1.first_name ,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' AND T2.tourney_name  =  'Australian Open' #### PostgreSQL SQL QUERY SELECT DISTINCT T1.first_name ,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' AND T2.tourney_name  =  'Australian Open' #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.first_name ,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' AND T2.tourney_name  =  'Australian Open'
SELECT first_name ,  country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name ,  country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name ,  last_name FROM players ORDER BY birth_date
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date
SELECT first_name ,  last_name FROM players WHERE hand  =  'left' OR hand  =  'L' ORDER BY birth_date
SELECT first_name ,  last_name ,  birth_date FROM players WHERE hand  =  'left' ORDER BY birth_date
SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.tours  =  (SELECT max(tours) FROM rankings) #### PostgreSQL SQL QUERY SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.tours  =  (SELECT max(tours) FROM rankings) #### PostgreSQL FIXED SQL QUERY SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.tours  =  (SELECT max(tours) FROM rankings) #### Oracle SQL QUERY SELECT T1.first_name ,  T1.country_code FROM players T1 JOIN rankings T2 ON T1.player_id  =  T2.player_id WHERE T2.tours  =  (SELECT max(tours) FROM rankings) #### Oracle FIXED SQL QUERY SELECT T1.first_name ,  T1.country_code FROM players T1 JOIN rankings T2 ON T1.player_id  =  T2.player_id WHERE T2.tours  =  (SELECT max(tours) FROM rankings) #### MySQL
SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.tours  =  (SELECT max(tours) FROM rankings)
SELECT year FROM matches GROUP BY year ORDER BY sum(match_num) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT year FROM matches GROUP BY year ORDER BY sum(match_num) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT year FROM matches GROUP BY year ORDER BY sum(match_num) DESC LIMIT 1
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
SELECT T1.first_name ,  T1.last_name ,  T3.ranking_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id GROUP BY T2.winner_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.first_name ,  T1.last_name ,  T3.ranking_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id GROUP BY T2.winner_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.first_name ,  T1.last_name ,  T3.ranking_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id GROUP BY T2.winner_id ORDER BY count(*) DESC LIMIT 1 #### Oracle SQL QUERY SELECT T1.first_name ,  T1.last_name ,  T3.ranking_points FROM players T1 JOIN matches T2 ON T1.player_id  =  T2.winner_id JOIN
SELECT T1.first_name ,  T1.last_name ,  max(T2.ranking_points) FROM players AS T1 JOIN matches AS T3 ON T1.player_id  =  T3.winner_id JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name ,  T1.last_name
SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id JOIN matches AS T3 ON T1.player_id  =  T3.winner_id WHERE T2.ranking_points  =  (SELECT max(ranking_points) FROM rankings) AND T3.tourney_name  =  'Australian Open' #### PostgreSQL SQL QUERY SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id JOIN matches AS T3 ON T1.player_id  =  T3.winner_id WHERE T2.ranking_points  =  (SELECT max(ranking_points) FROM rankings) AND T3.tourney_name  =  'Australian Open' #### PostgreSQL FIXED SQL QUERY SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id JOIN matches AS T3 ON T1.player_id  =  T3.winner_id WHERE T2.ranking_points  =  (SELECT max(ranking_points) FROM rankings) AND T3.tourney_name  =  'Australian Open' #### MySQL SQL QUERY SELECT T1.first
SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1
SELECT loser_name ,  winner_name FROM matches ORDER BY minutes DESC LIMIT 1
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SELECT avg(ranking) ,  first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.first_name
SELECT T1.first_name ,  avg(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id
SELECT sum(ranking_points) ,  first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.first_name
SELECT T1.first_name ,  sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id
SELECT country_code ,  count(*) FROM players GROUP BY country_code
SELECT country_code ,  COUNT (country_code) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code HAVING count(player_id)  =  (SELECT max(count) FROM (SELECT country_code ,  count(player_id) AS count FROM players GROUP BY country_code))
SELECT country_code FROM players GROUP BY country_code ORDER BY count(player_id) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 #### PostgreSQL SQL QUERY SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 #### PostgreSQL FIXED SQL QUERY SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
SELECT ranking_date ,  sum(tours) FROM rankings GROUP BY ranking_date
SELECT year ,  count(*) FROM matches GROUP BY year
SELECT year ,  count(*) FROM matches GROUP BY year
SELECT DISTINCT T1.first_name ,  T1.last_name ,  T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id ORDER BY T3.ranking ASC LIMIT 3 #### PostgreSQL SQL QUERY SELECT DISTINCT T1.first_name ,  T1.last_name ,  T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id ORDER BY T3.ranking ASC LIMIT 3 #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.first_name ,  T1.last_name ,  T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id ORDER BY T3.ranking ASC LIMIT 3 #### Oracle SQL QUERY SELECT DISTINCT T1.first_name ,  T1.last_name ,  T3.ranking FROM players T1 JOIN matches T2 ON T1.player_id  =  T2.winner_id JOIN rankings T3 ON T1.player_id  =
SELECT T1.first_name ,  T1.last_name ,  T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id ORDER BY T3.ranking ASC LIMIT 3
SELECT count(DISTINCT T2.winner_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  'left' AND T2.tourney_name  =  'WTA Championships'
SELECT count(*) FROM matches WHERE winner_hand  =  'left' AND tourney_name  =  'WTA'
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id GROUP BY T1.player_id ORDER BY T3.ranking_points DESC LIMIT 1
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id GROUP BY T1.player_id ORDER BY T3.ranking_points DESC LIMIT 1
SELECT hand ,  count(*) FROM players GROUP BY hand
SELECT hand ,  count(*) FROM players GROUP BY hand
SELECT COUNT (id) FROM ship WHERE disposition_of_ship  =  'Captured'
SELECT name ,  tonnage FROM ship ORDER BY name DESC
SELECT name ,  date ,  result FROM battle
SELECT max(injured) ,  min(injured) FROM death #### PostgreSQL SQL QUERY SELECT max(injured) ,  min(injured) FROM death #### PostgreSQL FIXED SQL QUERY SELECT max(injured) ,  min(injured) FROM death
SELECT avg(injured) FROM death
SELECT note ,  killed ,  injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  t
SELECT name ,  result FROM battle WHERE bulgarian_commander  !=  'Boril'
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id HAVING sum(killed)  >  10
SELECT T1.id ,  T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id ,  T1.name ORDER BY sum(injured) DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
SELECT count(DISTINCT result) FROM battle
SELECT count(DISTINCT T1.id) FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.tonnage  =  225 AND T2.lost_in_battle IS NULL
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' OR T2.name  =  'HMS Atalanta' ORDER BY T1.date DESC #### PostgreSQL SQL QUERY SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' OR T2.name  =  'HMS Atalanta' ORDER BY T1.date DESC #### PostgreSQL FIXED SQL QUERY SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' OR T2.name  =  'HMS Atalanta' ORDER BY T1.date DESC
SELECT DISTINCT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1 ,  line_2 FROM Addresses #### PostgreSQL SQL QUERY SELECT line_1 ,  line_2 FROM Addresses #### PostgreSQL FIXED SQL QUERY SELECT line_1 ,  line_2 FROM Addresses
SELECT line_1 ,  line_2 FROM Addresses #### PostgreSQL SQL QUERY SELECT line_1 ,  line_2 FROM Addresses #### PostgreSQL FIXED SQL QUERY SELECT line_1 ,  line_2 FROM Addresses
SELECT count(DISTINCT course_id) FROM Courses #### MySQL SQL QUERY SELECT count(*) FROM Courses #### MySQL FIXED SQL QUERY SELECT count(DISTINCT course_id) FROM Courses #### PostgreSQL SQL QUERY SELECT count(*) FROM Courses #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT course_id) FROM Courses
SELECT count(DISTINCT course_id) FROM Courses #### MySQL SQL QUERY SELECT count(*) FROM Courses #### MySQL FIXED SQL QUERY SELECT count(DISTINCT course_id) FROM Courses #### PostgreSQL SQL QUERY SELECT count(*) FROM Courses #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT course_id) FROM Courses
SELECT course_description FROM Courses WHERE course_name  =  'Math' #### PostgreSQL SQL QUERY SELECT course_description FROM Courses WHERE course_name  =  'Math' #### PostgreSQL FIXED SQL QUERY SELECT course_description FROM Courses WHERE course_name  =  'Math'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE line_1  =  'Port Chelsea'
SELECT T1.department_name ,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  =  (SELECT max(count(*)) FROM Degree_Programs AS T3 GROUP BY T3.department_id)
SELECT T1.department_name ,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_id HAVING count(*)  =  (SELECT max(count(*)) FROM Degree_Programs AS T3 GROUP BY T3.department_id)
SELECT count(DISTINCT T1.department_id) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
SELECT count(DISTINCT department_id) FROM Degree_Programs
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id) FROM Degree_Programs #### Question: How many students are enrolled in the Computer Science department? #### SQLite SQL QUERY SELECT count(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Computer Science' #### SQLite FIXED SQL QUERY SELECT count(DISTINCT Students.student_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Computer Science' #### Question: How many students are enrolled in the Computer Science department in the Spring 2020 semester? #### SQLite SQL QUERY SELECT count(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Program
SELECT count(degree_summary_name) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Engineering'
SELECT count(degree_summary_name) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Engineering'
SELECT section_name ,  section_description FROM Sections
SELECT section_name ,  section_description FROM Sections
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(DISTINCT T2.section_id)  <=  2
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  <  2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 #### Oracle SQL QUERY SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id
SELECT semester_name ,  semester_id FROM Semesters WHERE semester_id  =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(student_enrolment_id) DESC LIMIT 1) #### PostgreSQL SQL QUERY SELECT semester_name ,  semester_id FROM Semesters WHERE semester_id  =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(student_enrolment_id) DESC LIMIT 1) #### PostgreSQL FIXED SQL QUERY SELECT semester_name ,  semester_id FROM Semesters WHERE semester_id  =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(student_enrolment_id) DESC LIMIT 1) #### Oracle SQL QUERY SELECT semester_name ,  semester_id FROM Semesters WHERE semester_id  =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(student_enrolment_id) DESC FETCH FIRST 1 ROWS ONLY) #### Oracle FIXED SQL QUERY SELECT semester_name ,  semester_id FROM Semesters WHERE semester_id  =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(student_enrolment_id) DESC FETCH FIRST 1 ROWS ONLY) #### MySQL SQL QU
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### PostgreSQL SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### PostgreSQL FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### Oracle SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### Oracle FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### MySQL SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### MySQL FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### SQL Server SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### SQL Server FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### PostgreSQL SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### PostgreSQL FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### Oracle SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### Oracle FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### MySQL SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### MySQL FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### SQL Server SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' #### SQL Server FIXED SQL QUERY SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.student_id HAVING count(DISTINCT T1.degree_program_id)  =  2
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.semester_id HAVING count(DISTINCT T2.degree_program_id)  =  2
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.degree_program_id  =  'Bachelor' #### PostgreSQL SQL QUERY SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.degree_program_id  =  'Bachelor' #### PostgreSQL FIXED SQL QUERY SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.degree_program_id  =  'Bachelor' #### MySQL SQL QUERY SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.degree_program_id  =  'Bachelor' #### MySQL FIXED SQL QUERY SELECT T1.first_name ,  T1.middle_name ,  T1.last
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelors'
SELECT degree_program_id ,  count(DISTINCT T2.student_id) FROM student_enrolment AS T1 JOIN student AS T2 ON T1.student_id  =  T2.student_id GROUP BY degree_program_id ORDER BY count(DISTINCT T2.student_id) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT degree_program_id ,  count(DISTINCT T2.student_id) FROM student_enrolment AS T1 JOIN student AS T2 ON T1.student_id  =  T2.student_id GROUP BY degree_program_id ORDER BY count(DISTINCT T2.student_id) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT degree_program_id ,  count(DISTINCT T2.student_id) FROM student_enrolment AS T1 JOIN student AS T2 ON T1.student_id  =  T2.student_id GROUP BY degree_program_id ORDER BY count(DISTINCT T2.student_id) DESC LIMIT 1 #### Oracle SQL QUERY SELECT degree_program_id ,  count(DISTINCT T2.student_id) FROM student_enrolment T1 JOIN student T2 ON T1.student_id  =  T2.student_id GROUP BY degree_program_id ORDER BY count(DISTINCT T2.student_id) DESC #### Oracle FIXED SQL QUERY SELECT degree_program_id ,  count(DISTINCT T
SELECT degree_summary_name FROM degree_programs WHERE degree_program_id  =  (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(student_id) DESC LIMIT 1) #### PostgreSQL SQL QUERY SELECT degree_summary_name FROM degree_programs WHERE degree_program_id  =  (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(student_id) DESC LIMIT 1) #### PostgreSQL FIXED SQL QUERY SELECT degree_summary_name FROM degree_programs WHERE degree_program_id  =  (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(student_id) DESC LIMIT 1) #### Oracle SQL QUERY SELECT degree_summary_name FROM degree_programs WHERE degree_program_id  =  (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(student_id) DESC LIMIT 1) #### Oracle FIXED SQL QUERY SELECT degree_summary_name FROM degree_programs WHERE degree_program_id  =  (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(student_id) DESC LIMIT 1) #### MySQL SQL QUERY SELECT degree_summary_name FROM degree_programs WHERE degree_program_id  =  (SELECT degree_program_id FROM student_enrolment GROUP BY degree
SELECT Degree_Programs.degree_program_id ,  Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY count(Student_Enrolment.degree_program_id) DESC LIMIT 1
SELECT degree_program_id ,  degree_summary_name FROM Degree_Programs WHERE degree_program_id  =  (SELECT degree_program_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1) #### PostgreSQL SQL QUERY SELECT degree_program_id ,  degree_summary_name FROM Degree_Programs WHERE degree_program_id  =  (SELECT degree_program_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1) #### PostgreSQL FIXED SQL QUERY SELECT degree_program_id ,  degree_summary_name FROM Degree_Programs WHERE degree_program_id  =  (SELECT degree_program_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1) #### MySQL SQL QUERY SELECT degree_program_id ,  degree_summary_name FROM Degree_Programs WHERE degree_program_id  =  (SELECT degree_program_id FROM D
SELECT DISTINCT T1.student_id ,  T2.first_name ,  T2.middle_name ,  T2.last_name ,  count(*) FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT DISTINCT T1.student_id ,  T2.first_name ,  T2.middle_name ,  T2.last_name ,  count(*) FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.student_id ,  T2.first_name ,  T2.middle_name ,  T2.last_name ,  count(*) FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 #### Oracle SQL QUERY SELECT DISTINCT T1.student_id ,  T2.first_name ,  T2.middle_name ,  T2.last_name ,  count(*) FROM student_enrolment T1 JOIN students T2 ON T1.student_id  =  T2.student_id GROUP BY
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id ,  count(T2.student_enrolment_id) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.student_enrolment_id HAVING count(*)  =  (SELECT max(count(*)) FROM Student_Enrolment) #### PostgreSQL SQL QUERY SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id ,  count(T2.student_enrolment_id) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.student_enrolment_id HAVING count(*)  =  (SELECT max(count(*)) FROM Student_Enrolment) #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id ,  count(T2.student_enrolment_id) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.student_enrolment_id HAVING count(*)  =
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id) #### PostgreSQL SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment) #### PostgreSQL FIXED SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id) #### Oracle SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment) #### Oracle FIXED SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id) #### MySQL SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment) #### MySQL FIXED SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id) #### SQL Server SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment) #### SQL Server FIXED SQL QUERY SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id
SELECT semester_name FROM semesters AS T1 WHERE NOT EXISTS (SELECT * FROM student_enrolment AS T2 WHERE T1.semester_id  =  T2.semester_id) #### PostgreSQL SQL QUERY SELECT semester_name FROM semesters AS T1 WHERE NOT EXISTS (SELECT * FROM student_enrolment AS T2 WHERE T1.semester_id  =  T2.semester_id) #### PostgreSQL FIXED SQL QUERY SELECT semester_name FROM semesters AS T1 WHERE NOT EXISTS (SELECT * FROM student_enrolment AS T2 WHERE T1.semester_id  =  T2.semester_id) #### Oracle SQL QUERY SELECT semester_name FROM semesters AS T1 WHERE NOT EXISTS (SELECT * FROM student_enrolment AS T2 WHERE T1.semester_id  =  T2.semester_id) #### Oracle FIXED SQL QUERY SELECT semester_name FROM semesters AS T1 WHERE NOT EXISTS (SELECT * FROM student_enrolment AS T2 WHERE T1.semester_id  =  T2.semester_id) #### MySQL SQL QUERY SELECT semester_name FROM semesters AS T1 WHERE NOT EXISTS (SELECT * FROM student_enrolment AS T2 WHERE T1.semester_id  =  T2.semester_id) #### MySQL FIXED SQL QUERY SELECT semester_name FROM semesters AS T1 WHERE NOT EXISTS (SELECT * FROM student_
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  (SELECT max(count(*)) FROM Student_Enrolment_Courses GROUP BY course_id)
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  (SELECT max(count(*)) FROM Student_Enrolment_Courses GROUP BY course_id)
SELECT DISTINCT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'North Carolina' AND T1.student_id NOT IN (SELECT T3.student_id FROM Student_Enrolment AS T3)
SELECT last_name FROM Students WHERE id NOT IN (SELECT student_id FROM Student_Enrolment) AND state_province_county  =  'North Carolina'
SELECT T1.transcript_date ,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### PostgreSQL SQL QUERY SELECT T1.transcript_date ,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### PostgreSQL FIXED SQL QUERY SELECT T1.transcript_date ,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### Oracle SQL QUERY SELECT T1.transcript_date ,  T1.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### Oracle FIXED SQL QUERY SELECT T1.transcript_date ,  T1.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.trans
SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### PostgreSQL SQL QUERY SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### PostgreSQL FIXED SQL QUERY SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### Oracle SQL QUERY SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.student_course_id HAVING count(*)  >=  2 #### Oracle FIXED SQL QUERY SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.trans
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC LIMIT 1 #### Oracle SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC FETCH FIRST 1 ROWS ONLY #### Oracle FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC FETCH FIRST 1 ROWS ONLY #### MySQL SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC LIMIT 1 #### SQL Server SQL QUERY SELECT TOP 1 first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC #### SQL Server FIXED SQL QUERY SELECT TOP 1 first_name ,  middle_name ,  last_name FROM Students ORDER BY student_id ASC
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### Oracle SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC FETCH FIRST 1 ROWS ONLY #### Oracle FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC FETCH FIRST 1 ROWS ONLY #### MySQL SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### SQL Server SQL QUERY SELECT TOP 1 first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC #### SQL Server FIXED SQL QUERY SELECT TOP 1 first_name ,  middle_name ,  last_name
SELECT DISTINCT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.student_id ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT DISTINCT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.student_id ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.student_id ASC LIMIT 1 #### MySQL SQL QUERY SELECT DISTINCT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.student_id ASC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT DISTINCT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Student_Enrolment AS
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### Oracle SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### MySQL SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### SQL Server SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 #### SQL Server FIXED SQL QUERY SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name FROM Students WHERE permanent_address_id  !=  current_address_id
SELECT first_name FROM Students WHERE permanent_address_id  !=  current_address_id
SELECT address_id ,  line_1 ,  line_2 ,  line_3 ,  city ,  zip_postcode ,  state_province_county ,  country ,  other_address_details FROM addresses ORDER BY count(DISTINCT T2.student_id) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT address_id ,  line_1 ,  line_2 ,  line_3 ,  city ,  zip_postcode ,  state_province_county ,  country ,  other_address_details FROM addresses ORDER BY count(DISTINCT T2.id) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT address_id ,  line_1 ,  line_2 ,  line_3 ,  city ,  zip_postcode ,  state_province_county ,  country ,  other_address_details FROM addresses ORDER BY count(DISTINCT T2.student_id) DESC LIMIT 1 #### Oracle SQL QUERY SELECT address_id ,  line_1 ,  line_2 ,  line_3 ,  city ,  zip_postcode ,  state_province_county ,  country ,  other_address_details FROM addresses ORDER BY count(DISTINCT T2.id) DESC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT address_id ,  line_1 ,  line_2 ,  line_3 ,  city ,  zip_postcode ,  state_province_county ,  country ,  other_address
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T2.current_address_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN student AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T2.current_address_id ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T2.current_address_id ORDER BY count(*) DESC LIMIT 1 #### Oracle SQL QUERY SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses T1 JOIN student T2 ON T1.address_id  =  T2.current_address_id GROUP BY T2.current_address_id ORDER BY count(*) DESC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses T1 JOIN
SELECT AVG(transcript_date) FROM Transcripts
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### Oracle SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### MySQL SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### SQL Server SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### SQL Server FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### Oracle SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### MySQL SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### MySQL FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### SQL Server SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 #### SQL Server FIXED SQL QUERY SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT count(DISTINCT transcript_id) FROM Transcripts #### MySQL SQL QUERY SELECT count(*) FROM Transcripts #### MySQL FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts #### PostgreSQL SQL QUERY SELECT count(*) FROM Transcripts #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts #### Oracle SQL QUERY SELECT count(*) FROM Transcripts #### Oracle FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts #### SQL Server SQL QUERY SELECT count(*) FROM Transcripts #### SQL Server FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts
SELECT count(DISTINCT transcript_id) FROM Transcripts #### MySQL SQL QUERY SELECT count(*) FROM Transcripts #### MySQL FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts #### PostgreSQL SQL QUERY SELECT count(*) FROM Transcripts #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts #### Oracle SQL QUERY SELECT count(*) FROM Transcripts #### Oracle FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts #### SQL Server SQL QUERY SELECT count(*) FROM Transcripts #### SQL Server FIXED SQL QUERY SELECT count(DISTINCT transcript_id) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT max(transcript_date) FROM Transcripts
SELECT count(DISTINCT T2.transcript_id) ,  T1.student_course_id FROM transcript_contents AS T1 JOIN transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.student_course_id #### PostgreSQL SQL QUERY SELECT count(DISTINCT T2.transcript_id) ,  T1.student_course_id FROM transcript_contents AS T1 JOIN transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.student_course_id #### PostgreSQL FIXED SQL QUERY SELECT count(DISTINCT T2.transcript_id) ,  T1.student_course_id FROM transcript_contents AS T1 JOIN transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.student_course_id #### Oracle SQL QUERY SELECT count(DISTINCT T2.transcript_id) ,  T1.student_course_id FROM transcript_contents T1 JOIN transcripts T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.student_course_id #### Oracle FIXED SQL QUERY SELECT count(DISTINCT T2.transcript_id) ,  T1.student_course_id FROM transcript_contents T1 JOIN transcripts T2 ON T1.transcript
SELECT course_id ,  student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING count(course_id)  =  (SELECT max(count(course_id)) FROM Student_Enrolment_Courses GROUP BY course_id) #### PostgreSQL SQL QUERY SELECT course_id ,  student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING count(course_id)  =  (SELECT max(count(course_id)) FROM Student_Enrolment_Courses GROUP BY course_id) #### PostgreSQL FIXED SQL QUERY SELECT course_id ,  student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING count(course_id)  =  (SELECT max(count(course_id)) FROM Student_Enrolment_Courses GROUP BY course_id) #### Oracle SQL QUERY SELECT course_id ,  student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING count(course_id)  =  (SELECT max(count(course_id)) FROM Student_Enrolment_Courses GROUP BY course_id) #### Oracle FIXED SQL QUERY SELECT course_id ,  student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING count(course_id)  =  (SELECT max(count(course_id)) FROM Student_En
SELECT T1.transcript_date ,  T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.transcript_id ORDER BY count(*) ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.transcript_date ,  T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.transcript_id ORDER BY count(*) ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.transcript_date ,  T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.transcript_id ORDER BY count(*) ASC LIMIT 1 #### Oracle SQL QUERY SELECT T1.transcript_date ,  T2.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.transcript_id ORDER BY count(*) ASC LIMIT 1 #### Oracle FIXED SQL QUERY SELECT T1.transcript_date ,  T2.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id  =  T2
SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id WHERE T1.transcript_id  =  (SELECT min(T2.transcript_id) FROM Transcript_Contents AS T2) #### PostgreSQL SQL QUERY SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id WHERE T1.transcript_id  =  (SELECT min(T2.transcript_id) FROM Transcript_Contents AS T2) #### PostgreSQL FIXED SQL QUERY SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id WHERE T1.transcript_id  =  (SELECT min(T2.transcript_id) FROM Transcript_Contents AS T2) #### MySQL SQL QUERY SELECT T1.transcript_id ,  T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id WHERE T1.transcript_id  =  (SELECT min(T2.transcript_id) FROM
SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Master') #### PostgreSQL SQL QUERY SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Master') #### PostgreSQL FIXED SQL QUERY SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Master') #### Oracle SQL QUERY SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Master') #### Oracle FIXED SQL QUERY SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Master') #### MySQL SQL QUERY SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Master') #### MySQL FIXED SQL QUERY SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Master') #### SQL Server SQL QUERY SELECT semester_id FROM Semesters WHERE semester_id IN (
SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =  'Bachelors' #### PostgreSQL SQL QUERY SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =  'Bachelors' #### PostgreSQL FIXED SQL QUERY SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =  'Bachelors' #### Oracle SQL QUERY SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =  'Bachelors' #### Oracle FIXED SQL QUERY SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =  'Bachelors' #### MySQL SQL QUERY SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =  'Bachelors' #### MySQL FIXED SQL QUERY SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =  'Bachelors' #### SQL Server SQL QUERY SELECT semester_id FROM semesters WHERE degree_summary_name  =  'Masters' OR degree_summary_name  =
SELECT count(DISTINCT T1.current_address_id) FROM Students AS T1
SELECT DISTINCT T1.line_1 ,  T1.line_2 ,  T1.line_3 ,  T1.city ,  T1.zip_postcode ,  T1.state_province_county ,  T1.country ,  T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id JOIN Students AS T3 ON T1.address_id  =  T3.permanent_address_id
SELECT * FROM Students ORDER BY last_name DESC #### PostgreSQL SQL QUERY SELECT * FROM Students ORDER BY last_name DESC #### PostgreSQL FIXED SQL QUERY SELECT * FROM Students ORDER BY last_name DESC
SELECT other_student_details FROM Students ORDER BY last_name DESC #### PostgreSQL SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC #### PostgreSQL FIXED SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC #### Oracle SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC #### Oracle FIXED SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC #### MySQL SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC #### MySQL FIXED SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC #### SQL Server SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC #### SQL Server FIXED SQL QUERY SELECT other_student_details FROM Students ORDER BY last_name DESC
SELECT section_name FROM Sections WHERE section_name  =  'h' #### PostgreSQL SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h' #### PostgreSQL FIXED SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h' #### Oracle SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h' #### Oracle FIXED SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h' #### MySQL SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h' #### MySQL FIXED SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h' #### SQL Server SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h' #### SQL Server FIXED SQL QUERY SELECT section_name FROM Sections WHERE section_name  =  'h'
SELECT section_description FROM Sections WHERE section_name  =  'h' #### PostgreSQL SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h' #### PostgreSQL FIXED SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h' #### Oracle SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h' #### Oracle FIXED SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h' #### MySQL SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h' #### MySQL FIXED SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h' #### SQL Server SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h' #### SQL Server FIXED SQL QUERY SELECT section_description FROM Sections WHERE section_name  =  'h'
SELECT DISTINCT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' OR T1.cell_mobile_number  =  09700166582
SELECT DISTINCT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' OR T1.cell_mobile_number  =  09700166582
SELECT Title FROM Cartoon ORDER BY Title
SELECT Title FROM Cartoon ORDER BY Title
SELECT Title FROM Cartoon WHERE Directed_by  =  'Ben Jones'
SELECT Title FROM Cartoon WHERE Directed_by  =  'Ben Jones'
SELECT count(*) FROM Cartoon WHERE Written_by  =  'Joseph Kuhr'
SELECT count(*) FROM Cartoon WHERE Written_by  =  'Joseph Kuhr'
SELECT Title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title FROM Cartoon WHERE Directed_by  =  'Ben Jones' OR Directed_by  =  'Brandon Vietti'
SELECT T1.Title FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.Channel  =  T2.Channel WHERE T1.Directed_by  =  'Ben Jones' OR T1.Directed_by  =  'Brandon Vietti'
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel
SELECT DISTINCT series_name ,  Content FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name  =  'Sky Radio'
SELECT T1.Content FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T2.series_name  =  'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name  =  'Sky Radio'
SELECT DISTINCT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.series_name  =  'Sky Radio'
SELECT count(*) FROM TV_Channel WHERE Language  =  'English'
SELECT count(*) FROM TV_Channel WHERE Language  =  'English'
SELECT Language ,  count(id) FROM TV_Channel GROUP BY Language ORDER BY count(id) ASC LIMIT 1 #### PostgreSQL SQL QUERY SELECT Language ,  count(id) FROM TV_Channel GROUP BY Language ORDER BY count(id) ASC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT Language ,  count(id) FROM TV_Channel GROUP BY Language ORDER BY count(id) ASC LIMIT 1
SELECT Language ,  count(id) FROM TV_Channel GROUP BY Language ORDER BY count(id) ASC LIMIT 1
SELECT Language ,  count(*) FROM TV_Channel GROUP BY Language
SELECT Language ,  count(*) FROM TV_Channel GROUP BY Language
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Title  =  'The Rise of the Blue Beetle!'
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Title  =  'The Rise of the Blue Beetle'
SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T2.series_name  =  'Sky Radio'
SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T2.series_name  =  'Sky Radio'
SELECT Episode FROM TV_series ORDER BY Rating DESC
SELECT Episode FROM TV_series ORDER BY Rating DESC
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT min(Share) ,  max(Share) FROM TV_series
SELECT max(Share) ,  min(Share) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode  =  'A Love of a Lifetime'
SELECT Air_Date FROM TV_series WHERE Episode  =  'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode  =  'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode  =  'A Love of a Lifetime'
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Episode  =  'A Love of a Lifetime'
SELECT series_name FROM TV_series WHERE Episode  =  'A Love of a Lifetime'
SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T2.series_name  =  'Sky Radio'
SELECT Episode FROM TV_series WHERE series_name  =  'Sky Radio'
SELECT Directed_by ,  count(*) FROM Cartoon GROUP BY Directed_by
SELECT Directed_by ,  COUNT (Title) FROM Cartoon GROUP BY Directed_by
SELECT production_code ,  Channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT Production_code ,  Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT Package_Option ,  series_name FROM TV_Channel WHERE high_definition_TV  =  1
SELECT Package_Option ,  series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T1.High_definition_TV  =  1
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey'
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey'
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS T2 WHERE T2.Written_by  =  'Todd Casey' AND T2.Channel  =  T1.id)
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS T2 WHERE T2.Written_by  =  'Todd Casey')
SELECT T1.series_name ,  T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones' OR T2.Directed_by  =  'Michael Chang'
SELECT DISTINCT T1.series_name ,  T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones' OR T2.Directed_by  =  'Michael Chang'
SELECT Pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language  !=  'English'
SELECT DISTINCT Pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language  !=  'English'
SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### PostgreSQL SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### PostgreSQL FIXED SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### Oracle SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### Oracle FIXED SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### MySQL SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### MySQL FIXED SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### SQL Server SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2) #### SQL Server FIXED SQL QUERY SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2)
SELECT id FROM TV_Channel GROUP BY id HAVING count(*)  >  2
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones')
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones')
SELECT Package_Option FROM TV_Channel WHERE id  NOT IN  (SELECT Channel FROM Cartoon WHERE Directed_by  =  'Ben Jones') #### PostgreSQL SQL QUERY SELECT Package_Option FROM TV_Channel WHERE id  NOT IN  (SELECT Channel FROM Cartoon WHERE Directed_by  =  'Ben Jones') #### PostgreSQL FIXED SQL QUERY SELECT Package_Option FROM TV_Channel WHERE id  NOT IN  (SELECT Channel FROM Cartoon WHERE Directed_by  =  'Ben Jones')
SELECT Package_Option FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS T2 WHERE T2.Directed_by  =  'Ben Jones' AND T2.Channel  =  T1.id)
SELECT count(*) FROM poker_player
SELECT count(*) FROM poker_player
SELECT DISTINCT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT DISTINCT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
SELECT DISTINCT Final_Table_Made ,  Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
SELECT max(Final_Table_Made) FROM poker_player WHERE Poker_Player_ID IN (SELECT Poker_Player_ID FROM poker_player WHERE Earnings  <  200000)
SELECT DISTINCT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT DISTINCT Name FROM people #### PostgreSQL SQL QUERY SELECT Name FROM people #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT Name FROM people
SELECT DISTINCT Name FROM poker_player WHERE Earnings  >  300000
SELECT Name FROM poker_player WHERE Earnings  >  300000
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  =  (SELECT min(Earnings) FROM poker_player)
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  =  (SELECT min(Earnings) FROM poker_player)
SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  =  (SELECT max(Height) FROM people)
SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1
SELECT avg(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200
SELECT avg(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC
SELECT Nationality ,  count(*) FROM people GROUP BY Nationality
SELECT Nationality ,  count(*) FROM people GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING count(*)  >  1
SELECT Nationality FROM people GROUP BY Nationality HAVING count(*)  >  1
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
SELECT Name ,  Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality  !=  'Russia'
SELECT Name FROM people WHERE Nationality  !=  'Russia'
SELECT T1.Name FROM people AS T1 WHERE NOT EXISTS (SELECT * FROM poker_player AS T2 WHERE T2.People_ID  =  T1.People_ID)
SELECT T1.Name FROM people AS T1 WHERE NOT EXISTS (SELECT * FROM poker_player AS T2 WHERE T2.People_ID  =  T1.People_ID)
SELECT COUNT (DISTINCT Nationality) FROM people
SELECT COUNT (DISTINCT Nationality) FROM people
SELECT COUNT (DISTINCT state) FROM AREA_CODE_STATE
SELECT contestant_number ,  contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id ,  phone_number ,  state FROM VOTES
SELECT max(area_code) ,  min(area_code) FROM AREA_CODE_STATE
SELECT max(created) FROM VOTES WHERE state  =  'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name  !=  'Jessie Alloway'
SELECT DISTINCT state ,  created FROM VOTES
SELECT DISTINCT T1.contestant_number ,  T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
SELECT min(count(*)) ,  T1.contestant_number ,  T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number , T1.contestant_name
SELECT COUNT (DISTINCT vote_id) FROM VOTES WHERE state  =  'NY' OR state  =  'CA'
SELECT count(DISTINCT T1.contestant_number) - count(DISTINCT T2.contestant_number) FROM CONTESTANTS AS T1 LEFT JOIN VOTES AS T2 ON T1.contestant_number  =  T2.contestant_number
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code HAVING count(*)  =  (SELECT max(count(*)) FROM VOTES AS T3 GROUP BY T3.state)
SELECT DISTINCT created ,  state ,  phone_number FROM VOTES WHERE contestant_number  =  (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name  =  'Tabatha Gehling')
SELECT DISTINCT T1.area_code FROM votes AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state  =  T2.state WHERE T1.contestant_number  =  'Tabatha Gehling' AND T1.area_code IN (SELECT DISTINCT T3.area_code FROM votes AS T3 JOIN AREA_CODE_STATE AS T4 ON T3.state  =  T4.state WHERE T3.contestant_number  =  'Kelly Clauss')
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear  >  1950
SELECT Name FROM country WHERE IndepYear  >  1950
SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'
SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'
SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Caribbean'
SELECT Continent FROM country WHERE Code  =  'AIA'
SELECT T1.Continent FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Anguilla'
SELECT T2.region FROM city AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.name  =  'Kabul'
SELECT Region FROM country WHERE Name  =  'Kabul'
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba' GROUP BY T1.Language ORDER BY T1.Percentage DESC LIMIT 1
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba'
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Central Africa'
SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
SELECT Name FROM country WHERE LifeExpectancy  =  (SELECT min(LifeExpectancy) FROM country WHERE Continent  =  'Asia') AND Continent  =  'Asia'
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'
SELECT sum(city.Population) ,  max(country.GNP) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent  =  'Asia' #### PostgreSQL SQL QUERY SELECT sum(city.Population) ,  max(country.GNP) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent  =  'Asia' #### PostgreSQL FIXED SQL QUERY SELECT sum(city.Population) ,  max(country.GNP) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent  =  'Asia'
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'republic'
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'
SELECT sum(Population) FROM city WHERE District  =  'Gelderland'
SELECT sum(Population) FROM city WHERE District  =  'Gelderland'
SELECT avg(GNP) ,  sum(Population) FROM country WHERE GovernmentForm  =  'US'
SELECT avg(GNP) ,  sum(Population) FROM country WHERE Name  =  'United States'
SELECT count(DISTINCT Language) FROM countrylanguage
SELECT count(DISTINCT Language) FROM countrylanguage
SELECT DISTINCT GovernmentForm FROM country WHERE Continent  =  'Africa'
SELECT DISTINCT GovernmentForm FROM country WHERE Continent  =  'Africa'
SELECT count(DISTINCT T2.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba'
SELECT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba'
SELECT count(countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode  =  country.Code WHERE countrylanguage.IsOfficial  =  'T' AND country.Name  =  'Afghanistan'
SELECT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Afghanistan'
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING count(*)  =  (SELECT max(count(*)) FROM countrylanguage GROUP BY CountryCode)
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING count(*)  =  (SELECT max(count(*)) FROM countrylanguage GROUP BY CountryCode)
SELECT T1.Continent ,  count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY count(DISTINCT T2.Language) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT T1.Continent ,  count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY count(DISTINCT T2.Language) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT T1.Continent ,  count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY count(DISTINCT T2.Language) DESC LIMIT 1
SELECT T1.Continent ,  count(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY count(T2.Language) DESC LIMIT 1
SELECT count(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.Language  =  'Dutch'
SELECT count(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.Language  =  'French'
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.Language  =  'French'
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' AND T2.Language  =  'French' AND T2.IsOfficial  =  'T'
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.Language  =  'French'
SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'
SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'
SELECT DISTINCT Region FROM country WHERE Language  =  'Dutch' OR Language  =  'English'
SELECT name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch')
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  'Asia' GROUP BY T1.Language ORDER BY count(*) DESC LIMIT 1
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  'Asia' GROUP BY T1.Language ORDER BY count(*) DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE Language IN (SELECT Language FROM countrylanguage WHERE Language IN (SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) > 1) AND Language IN (SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'republic')))
SELECT Language FROM countrylanguage WHERE Language NOT IN (SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode  =  country.Code WHERE GovernmentForm  =  'republic' GROUP BY Language HAVING count(*)  >  1)
SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.population  =  (SELECT max(population) FROM city) AND T2.language  =  'English'
SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.population  =  (SELECT max(population) FROM city) AND T2.language  =  'English'
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE SurfaceArea  =  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Asia') AND Continent  =  'Asia'
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT avg(LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English'
SELECT avg(LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English'
SELECT sum(Population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English'
SELECT sum(T1.Population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English'
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.HeadOfState  =  'Beatrix'
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.HeadOfState  =  'Beatrix'
SELECT count(DISTINCT T2.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.IndepYear  <  1930
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.IndepYear  <  1930
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT MAX(SurfaceArea) FROM country WHERE Continent  =  'Europe')
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT SurfaceArea FROM country WHERE Continent  =  'Europe')
SELECT Name FROM country WHERE Continent  =  'Africa' AND Population  <  (SELECT Name FROM country WHERE Continent  =  'Asia')
SELECT name FROM country WHERE continent  =  'Africa' AND population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia')
SELECT Name FROM country WHERE Continent  =  'Asia' AND Population  >  (SELECT max(Population) FROM country WHERE Continent  =  'Africa')
SELECT Name FROM country WHERE Continent  =  'Asia' AND Population  >  (SELECT Code FROM country WHERE Continent  =  'Africa')
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English'
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English'
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English'
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English'
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' AND T1.GovernmentForm  !=  'Republic'
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' AND T1.GovernmentForm  !=  'Republic'
SELECT T1.name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T2.Continent  =  'Europe' AND T3.Language  !=  'English' AND T1.CountryCode  =  T2.Code AND T3.CountryCode  =  T2.Code
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T1.CountryCode  =  T3.CountryCode WHERE T3.Language  !=  'English' AND T2.Continent  =  'Europe'
SELECT DISTINCT T1.ID FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T2.Continent  =  'Asia' AND T3.Language  =  'Chinese' AND T2.Code  =  T3.CountryCode AND T2.Code  =  T1.CountryCode
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T1.CountryCode  =  T3.CountryCode WHERE T2.Continent  =  'Asia' AND T3.Language  =  'Chinese' AND T3.IsOfficial  =  'T'
SELECT Name , IndepYear , SurfaceArea FROM country WHERE Population = (SELECT min(Population) FROM country)
SELECT Name ,  IndepYear ,  SurfaceArea ,  Population FROM country ORDER BY Population ASC LIMIT 1
SELECT Population ,  Name ,  HeadOfState FROM country WHERE SurfaceArea  =  (SELECT max(SurfaceArea) FROM country)
SELECT Name ,  Population ,  HeadOfState FROM country WHERE SurfaceArea  =  (SELECT max(SurfaceArea) FROM country)
SELECT T1.Name ,  count(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE count(T2.Language)  >=  3 GROUP BY T1.Code
SELECT T1.Name ,  count(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE count(T2.Language)  >  2 GROUP BY T1.Code
SELECT ID ,  Population FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
SELECT ID FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
SELECT GovernmentForm ,  sum(Population) FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
SELECT GovernmentForm ,  sum(Population) FROM country WHERE LifeExpectancy  >  72 GROUP BY GovernmentForm
SELECT avg(LifeExpectancy) ,  sum(Population) FROM country WHERE Continent IN (SELECT Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72)
SELECT Continent ,  sum(Population) ,  avg(LifeExpectancy) FROM country WHERE LifeExpectancy  <  72 GROUP BY Continent
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT count(*) FROM country WHERE Continent  =  'Asia'
SELECT count(*) FROM country WHERE Continent  =  'Asia'
SELECT Name FROM country WHERE Continent  =  'Europe' AND Population  =  80000
SELECT Name FROM country WHERE Continent  =  'Europe' AND Population  =  80000
SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE SurfaceArea  >  3000 AND Continent  =  'North America' GROUP BY Continent
SELECT SUM(Population) ,  avg(SurfaceArea) FROM country WHERE Region  =  'North America' AND SurfaceArea  >  3000
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(*) DESC LIMIT 1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(*) DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE Percentage  =  (SELECT max(Percentage) FROM countrylanguage) GROUP BY Language
SELECT T1.Code ,  T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  1 GROUP BY T1.Code ORDER BY T2.Percentage DESC
SELECT count(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.Percentage  >  50
SELECT count(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish'
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' GROUP BY T1.Code ORDER BY MAX(T2.Percentage) DESC LIMIT 1
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.Percentage  >  50 #### PostgreSQL SQL QUERY SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.Percentage  >  50 #### PostgreSQL FIXED SQL QUERY SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.Percentage  >  50
SELECT count(*) FROM conductor
SELECT count(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age
SELECT Name FROM conductor WHERE Nationality  !=  'USA'
SELECT Name FROM conductor WHERE Nationality  !=  'USA'
SELECT DISTINCT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT DISTINCT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show
SELECT avg(Attendance) FROM show
SELECT max(performance.Share) ,  min(performance.Share) FROM performance WHERE performance.Type  !=  'Live final' #### PostgreSQL SQL QUERY SELECT max(performance.Share) ,  min(performance.Share) FROM performance WHERE performance.Type  !=  'Live final' #### PostgreSQL FIXED SQL QUERY SELECT max(performance.Share) ,  min(performance.Share) FROM performance WHERE performance.Type  !=  'Live final'
SELECT max(Share) ,  min(Share) FROM performance WHERE Type  !=  'Live final' #### PostgreSQL SQL QUERY SELECT max(Share) ,  min(Share) FROM performance WHERE Type  !=  'Live final' #### PostgreSQL FIXED SQL QUERY SELECT max(Share) ,  min(Share) FROM performance WHERE Type  !=  'Live final'
SELECT COUNT (DISTINCT Nationality) FROM conductor
SELECT COUNT (DISTINCT Nationality) FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### PostgreSQL SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### PostgreSQL FIXED SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### MySQL SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### MySQL FIXED SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### Oracle SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### Oracle FIXED SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### PostgreSQL SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### PostgreSQL FIXED SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### MySQL SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### MySQL FIXED SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### Oracle SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID #### Oracle FIXED SQL QUERY SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T
SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING count(*)  >  1
SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING count(*)  >  1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING count(*)  =  (SELECT max(count(*)) FROM orchestra AS T3 GROUP BY T3.Conductor_ID)
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING count(*)  =  (SELECT max(count(*)) FROM orchestra AS T3 GROUP BY T3.Conductor_ID)
SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Year_of_Founded  >  2008
SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Year_of_Founded  >  2008
SELECT Record_Company ,  COUNT (DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company #### PostgreSQL SQL QUERY SELECT Record_Company ,  COUNT (DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company #### PostgreSQL FIXED SQL QUERY SELECT Record_Company ,  COUNT (DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company
SELECT Record_Company ,  COUNT (DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count(*) DESC
SELECT T1.Major_Record_Format ,  count(T2.Weekly_rank) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Major_Record_Format ORDER BY count(T2.Weekly_rank) DESC
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL SQL QUERY SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 #### PostgreSQL FIXED SQL QUERY SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1
SELECT T1.Orchestra FROM orchestra AS T1 WHERE NOT EXISTS (SELECT T2.Orchestra_ID FROM performance AS T2 WHERE T2.Orchestra_ID  =  T1.Orchestra_ID) #### PostgreSQL SQL QUERY SELECT T1.Orchestra FROM orchestra AS T1 WHERE NOT EXISTS (SELECT T2.Orchestra_ID FROM performance AS T2 WHERE T2.Orchestra_ID  =  T1.Orchestra_ID) #### PostgreSQL FIXED SQL QUERY SELECT T1.Orchestra FROM orchestra AS T1 WHERE NOT EXISTS (SELECT T2.Orchestra_ID FROM performance AS T2 WHERE T2.Orchestra_ID  =  T1.Orchestra_ID)
SELECT DISTINCT T1.Orchestra FROM orchestra AS T1 WHERE NOT EXISTS (SELECT * FROM performance AS T2 WHERE T2.Orchestra_ID  =  T1.Orchestra_ID)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003 #### PostgreSQL SQL QUERY SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003 #### PostgreSQL FIXED SQL QUERY SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003 #### PostgreSQL SQL QUERY SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003 #### PostgreSQL FIXED SQL QUERY SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
SELECT count(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'
SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING count(*)  >  1)
SELECT DISTINCT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Performance_ID HAVING count(*)  >  1 #### PostgreSQL SQL QUERY SELECT DISTINCT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Performance_ID HAVING count(*)  >  1 #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Performance_ID HAVING count(*)  >  1
SELECT count(DISTINCT ID) FROM Highschooler
SELECT count(DISTINCT ID) FROM Highschooler
SELECT name ,  grade FROM Highschooler
SELECT name ,  grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name  =  'Kyle'
SELECT grade FROM Highschooler WHERE name  =  'Kyle'
SELECT name FROM Highschooler WHERE grade  =  10
SELECT name FROM Highschooler WHERE grade  =  10
SELECT ID FROM Highschooler WHERE name  =  'Kyle'
SELECT ID FROM Highschooler WHERE name  =  'Kyle'
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade  =  9 OR grade  =  10
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade  =  9 OR grade  =  10
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  =  (SELECT max(count(*)) FROM Highschooler GROUP BY grade)
SELECT grade FROM Highschooler GROUP BY grade HAVING count(grade)  >=  4
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
SELECT T1.ID ,  count(DISTINCT T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
SELECT T1.name ,  count(DISTINCT T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name
SELECT T1.name ,  count(DISTINCT T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING count(*)  =  (SELECT max(count(*)) FROM friend)
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  =  (SELECT max(count(*)) FROM friend AS T3 GROUP BY T3.student_id)
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  3
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  3
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  'Kyle' OR T1.id  =  T2.friend_id
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  'Kyle' OR T1.id  =  T2.friend_id
SELECT count(DISTINCT T2.student_id) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.ID WHERE T2.name  =  'Kyle'
SELECT count(DISTINCT T2.student_id) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.ID WHERE T2.name  =  'Kyle'
SELECT DISTINCT T1.ID FROM highschooler AS T1 WHERE NOT EXISTS (SELECT * FROM friend AS T2 WHERE T2.student_id  =  T1.ID) #### PostgreSQL SQL QUERY SELECT DISTINCT T1.ID FROM highschooler AS T1 WHERE NOT EXISTS (SELECT * FROM friend AS T2 WHERE T2.student_id  =  T1.ID) #### PostgreSQL FIXED SQL QUERY SELECT DISTINCT T1.ID FROM highschooler AS T1 WHERE NOT EXISTS (SELECT * FROM friend AS T2 WHERE T2.student_id  =  T1.ID)
SELECT DISTINCT T1.id FROM highschooler AS T1 WHERE NOT EXISTS (SELECT * FROM friend AS T2 WHERE T2.student_id  =  T1.id)
SELECT DISTINCT T1.name FROM highschooler AS T1 WHERE NOT EXISTS (SELECT * FROM friend AS T2 WHERE T2.student_id  =  T1.ID)
SELECT DISTINCT T1.name FROM Highschooler AS T1 WHERE NOT EXISTS (SELECT * FROM Friend AS T2 WHERE T2.student_id  =  T1.ID)
SELECT DISTINCT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id JOIN likes AS T3 ON T1.id  =  T3.liked_id
SELECT DISTINCT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id JOIN likes AS T3 ON T1.id  =  T3.student_id WHERE T2.friend_id  IN  (SELECT id FROM highschooler) AND T3.liked_id  IN  (SELECT id FROM highschooler)
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id JOIN likes AS T3 ON T1.id  =  T3.student_id
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.ID  =  T2.student_id JOIN likes AS T3 ON T1.ID  =  T3.student_id
SELECT Highschooler.ID ,  count(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID
SELECT count(T2.student_id) ,  T1.ID FROM highschooler AS T1 JOIN likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID
SELECT T1.name ,  count(T2.student_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name
SELECT T1.name ,  count(T2.student_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.liked_id GROUP BY T2.liked_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2
SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2 AND T1.grade  >  5
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE T1.grade  >  5 AND count(*)  >=  2 GROUP BY T2.student_id
SELECT COUNT(*) FROM Likes WHERE student_id  =  'Kyle'
SELECT count(student_id) FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.ID WHERE T2.name  =  'Kyle'
SELECT avg(grade) FROM highschooler WHERE id  IN  (SELECT DISTINCT student_id FROM friend)
SELECT avg(grade) FROM highschooler WHERE EXISTS (SELECT * FROM friend WHERE friend.student_id  =  highschooler.ID)
SELECT min(grade) FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id  =  highschooler.ID) #### PostgreSQL SQL QUERY SELECT min(grade) FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id  =  highschooler.id) #### PostgreSQL FIXED SQL QUERY SELECT min(grade) FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id  =  highschooler.id)
SELECT min(grade) FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id  =  highschooler.ID)
SELECT DISTINCT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state
SELECT DISTINCT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state
SELECT avg(age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
SELECT avg(age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(*) > 2)
SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' OR professional_id  IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING count(*)  >  2)
SELECT T1.name FROM Dogs AS T1 WHERE T1.dog_id NOT IN (SELECT T2.dog_id FROM Treatments AS T2 WHERE T2.cost_of_treatment  >  1000)
SELECT DISTINCT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id GROUP BY T1.name HAVING sum(T2.cost_of_treatment)  <  1000
SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs
SELECT DISTINCT T1.first_name FROM Owners AS T1 WHERE T1.first_name NOT IN (SELECT DISTINCT T2.name FROM Dogs AS T2) AND T1.first_name NOT IN (SELECT DISTINCT T3.first_name FROM Professionals AS T3)
SELECT DISTINCT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT T2.professional_id FROM Treatments AS T2)
SELECT DISTINCT T1.professional_id ,  T1.role_code ,  T1.email_address FROM professionals AS T1 WHERE T1.professional_id NOT IN (SELECT DISTINCT T2.professional_id FROM treatments AS T2)
SELECT DISTINCT T2.owner_id ,  T2.first_name ,  T2.last_name FROM Owners AS T2 JOIN Dogs AS T1 ON T2.owner_id  =  T1.owner_id GROUP BY T2.owner_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.owner_id ,  T1.first_name ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id HAVING count(*)  =  (SELECT max(count(*)) FROM Dogs AS T3 GROUP BY T3.owner_id)
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T2.professional_id HAVING count(*)  >  2
SELECT professional_id ,  role_code ,  first_name FROM Professionals WHERE professional_id  IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(*)  >  2)
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T2.breed_code HAVING count(*)  =  (SELECT max(count(*)) FROM Dogs AS T3 GROUP BY T3.breed_code)
SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T2.breed_code HAVING count(*)  =  (SELECT max(count(*)) FROM dogs GROUP BY breed_code)
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Treatments AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ,  T1.last_name ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Treatments AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ,  T1.last_name ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_description  =  (SELECT min(cost_of_treatment) FROM Treatments)
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_description  =  (SELECT min(cost_of_treatment) FROM Treatments)
SELECT DISTINCT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Treatments AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ,  T1.zip_code ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT DISTINCT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T2.treatment_type_code HAVING count(*)  >=  2
SELECT professional_id ,  cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id GROUP BY professional_id HAVING count(DISTINCT treatment_type_code)  >  1
SELECT first_name ,  last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments))
SELECT first_name ,  last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments))
SELECT date_of_treatment ,  first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
SELECT date_of_treatment ,  first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
SELECT cost_of_treatment ,  treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code  =  Treatment_Types.treatment_type_code
SELECT cost_of_treatment ,  treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code  =  Treatment_Types.treatment_type_code
SELECT T1.first_name ,  T1.last_name ,  T2.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T2.size_code  =  T3.size_code ORDER BY T1.last_name
SELECT T1.first_name ,  T1.last_name ,  T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T2.size_code  =  T3.size_code
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
SELECT Dogs.name , Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT Breeds.breed_code FROM Breeds GROUP BY Breeds.breed_code ORDER BY COUNT(*) LIMIT 1)
SELECT DISTINCT T1.name ,  T3.date_of_treatment FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code  =  T2.breed_code JOIN Treatments AS T3 ON T1.dog_id  =  T3.dog_id ORDER BY T2.breed_code
SELECT DISTINCT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT DISTINCT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  (SELECT min(age) FROM Dogs)
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  (SELECT min(age) FROM Dogs)
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
SELECT DISTINCT date_arrived ,  date_departed FROM Dogs
SELECT DISTINCT date_arrived ,  date_departed FROM Dogs
SELECT count(DISTINCT T1.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
SELECT count(DISTINCT T1.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT role_code ,  street ,  city ,  state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code ,  street ,  city ,  state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
SELECT count(dog_id) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)
SELECT count(dog_id) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT count(DISTINCT T1.dog_id) FROM Dogs AS T1 WHERE T1.dog_id NOT IN (SELECT T2.dog_id FROM Treatments AS T2)
SELECT count(DISTINCT T1.dog_id) FROM Dogs AS T1 WHERE T1.dog_id NOT IN (SELECT T2.dog_id FROM Treatments AS T2)
SELECT count(DISTINCT T1.owner_id) FROM Owners AS T1 WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM Dogs AS T2)
SELECT count(DISTINCT T1.owner_id) FROM Owners AS T1 WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM Dogs AS T2)
SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT DISTINCT T2.professional_id FROM Treatments AS T2)
SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT DISTINCT T2.professional_id FROM Treatments AS T2)
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT max(age) FROM Dogs
SELECT max(age) FROM Dogs
SELECT charge_type ,  charge_amount FROM Charges
SELECT charge_type ,  charge_amount FROM Charges
SELECT max(charge_amount) FROM Charges
SELECT max(charge_amount) FROM Charges
SELECT email_address ,  cell_number ,  home_phone FROM Professionals
SELECT email_address ,  cell_number ,  home_phone FROM Professionals
SELECT DISTINCT T1.breed_code ,  T2.size_code FROM Breeds AS T1 CROSS JOIN Sizes AS T2
SELECT DISTINCT breed_code ,  size_code FROM Dogs
SELECT T1.first_name ,  T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
SELECT T1.first_name ,  T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
SELECT count(*) FROM singer
SELECT count(*) FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year ,  Citizenship FROM singer
SELECT DISTINCT Birth_Year ,  Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship  !=  'France'
SELECT Name FROM singer WHERE Citizenship  !=  'French'
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship ,  COUNT (Singer_ID) FROM singer GROUP BY Citizenship
SELECT Citizenship ,  COUNT (Singer_ID) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT max(Net_Worth_Millions) ,  Citizenship FROM singer GROUP BY Citizenship
SELECT DISTINCT T1.Title ,  T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT DISTINCT T1.Title ,  T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Singer_ID HAVING count(*)  >  1
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Singer_ID HAVING count(*)  >  1
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name FROM singer AS T1 WHERE NOT EXISTS (SELECT * FROM song AS T2 WHERE T2.Singer_ID  =  T1.Singer_ID)
SELECT T1.Name FROM singer AS T1 WHERE NOT EXISTS (SELECT * FROM song AS T2 WHERE T2.Singer_ID  =  T1.Singer_ID)
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year  <  1945 AND Birth_Year  >  1955
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
SELECT count(*) FROM Other_Available_Features
SELECT T1.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  'AirCon'
SELECT DISTINCT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code
SELECT property_name FROM Properties WHERE (property_type_code  =  'house' OR property_type_code  =  'apartment') AND room_count  >  1
